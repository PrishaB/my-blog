{
  
    
        "post0": {
            "title": "View and Frontend",
            "content": "General Notes . Anything in includes will be found directly...don&#39;t need file extension when referencing a document | Design is more important, don&#39;t worry about backend for the week...the better the design, the happier Mortensen will be | _site directory --&gt; assemble things to be ready for the web That&#39;s why there is an index.md and an index.html...html is more ready for the web than md | . | Every page you render is an html file...anything else is just a coder helper to build a bigger html file | Make a bunch of fragments to create a website...html is static but has stuff like uh action buttons to make it seem alive | He&#39;s talking about the database thing from last year now :sob: Make a CRUD table based on the project --&gt; doesn&#39;t have to be a table, can be a for | We have to use HTML5 --&gt; has to do with the types...makes it more convenient for us --&gt; prevents input from being incorrect through filtering input (good idea is to look at different inputs for HTML5) | . | Don&#39;t need to wait for a functioning database to do other parts of the code | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2023/04/27/viewAndFrontend.html",
            "relUrl": "/jupyter/2023/04/27/viewAndFrontend.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "",
            "url": "https://prishab.github.io/my-blog/2023/04/27/aboutme.html",
            "relUrl": "/2023/04/27/aboutme.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Test that Occurred Due to Some Idiot Triggering Mr. M",
            "content": "Close Book Part of Test: . Define 1 Argument constructor for title | Define toString method for title, and a tester method | Generate unique id for class | Create a public getter that has Book Count | Define tester method that initializes at least 2 books, outputs title, and provides a count of books in library. | . import java.util.UUID; //built in Java method that allows user to generate a Universally Unique Identifier --&gt; guarantees each ID is unique public class Book { private final String id; private final String title; private static int bookCount; //initializing two instance variables...ID and title public Book(String title) { this.id = UUID.randomUUID().toString(); //Telling id to be a randomly generated UUID this.title = title; bookCount++; //adding to bookCount } //Getters for id, title, and bookCount public String getId() { return id; } public String getTitle() { return title; } public static int getBookCount() { return bookCount; } @Override //toString method public String toString() { return &quot;Book{&quot; + &quot;id=&#39;&quot; + id + &#39; &#39;&#39; + &quot;, title=&#39;&quot; + title + &#39; &#39;&#39; + &#39;}&#39;; } public static void main(String[] args) { Book book1 = new Book(&quot;The Great Gatsby&quot;); Book book2 = new Book(&quot;To Kill a Mockingbird&quot;); System.out.println(book1); System.out.println(book2); System.out.println(&quot;Number of books in library: &quot; + Book.getBookCount()); } } Book.main(null); . Book{id=&#39;219fd2cf-a293-463e-b5fa-e39e0f538a05&#39;, title=&#39;The Great Gatsby&#39;} Book{id=&#39;40ffd3b9-186f-41b7-bd49-9896d4604984&#39;, title=&#39;To Kill a Mockingbird&#39;} Number of books in library: 2 . Open Book Part of the Exam . Ensure Novel and Textbook run the Constructor from Book | Create instance variables unique to Novel has Author, Textbook has publishing company. These are not required in Constructor. Make sure there are getters and setters. | Define a default method in Book that returns shelfLife from date/time of constructor. Define shelfLife methods as method in TextBook and Novel. A Textbook has a fixed shelf life based on the date/time constructor. A Novel has a computed shelf life and is validated by averaging a certain number of Checkouts average over shelf life, use sensible data structure. | Make a method to count time book is checked out | Make a method to determine if book should come off of the shelf | Define tester method to test items #1-#5 | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2023/04/20/popTest.html",
            "relUrl": "/jupyter/2023/04/20/popTest.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Week of 4/17 -- Lesson 2",
            "content": "Hack # 1 -- Create method that sets all elements in array to n . void setArray(int[] arr, int n) { for (int i = 0; i &lt; array.length; i++){ array[i] = n; } } int[] array = new int[10]; setArray(array, 10); for (int i = 0; i &lt; array.length; i++) { System.out.println(array[i]); } // Should print all 10s when working properly . 10 10 10 10 10 10 10 10 10 10 . Hack # 2 -- Write an array to find the average of an array . //Finds the average of an array public static int average(int[] array) { int sum = 0; int total = 0; for (int i = 0; i &lt; array.length; i++){ sum += array[i]; total += 1; } int average = sum/total; return average; } //tester array int[] test = {3, 5, 7, 2, 10}; //returns 10 System.out.println(average(test)); . 5 . Hack #3 -- Find the average number of a diagonal in a 2d array . public static int averageDiagonal (int[][] array2D) { // your code here int sum = 0; int total = 0; for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[i].length; j++) { if (i == j) { sum += arr[i][j]; total++; } } } int avg = sum/total; return avg; } int[][] arr = { {1,2,3,4,5,6}, {7,8,9,10,11,12}, {0,1,2,3,4,5}, {10,11,12,13,14,15}, {15,16,17,18,19,20} }; System.out.println(averageDiagonal(arr)); . 8 . public class Position { private int row; private int col; public Position(int r, int c){ row = r; col = c; } public int getRow() { return row; } public int getCol() { return col; } public static Position findPosition(int num, int[][] intArr){ for (int r = 0; r &lt; intArr.length; r++){ for (int c = 0; c &lt; intArr[0].length; c++){ if (intArr[r][c] == num) { return new Position(r, c); } } } return null; } public static void main(String[] args) { int[][] arr = { {15,5,9,10}, {12,16,11,6}, {14,8,13,7} }; Position pos = Position.findPosition(11, arr); System.out.println(&quot;Row: &quot; + pos.getRow() + &quot;, Col: &quot; + pos.getCol()); } } Position.main(null); . Row: 1, Col: 2 .",
            "url": "https://prishab.github.io/my-blog/jupyter/2023/04/18/lessonTwo.html",
            "relUrl": "/jupyter/2023/04/18/lessonTwo.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Week of 4/17 -- Lesson 1",
            "content": "Merge Sort Hack # 1 . Use the integer mergesort that we created and adapt it to sort an array of Java String objects. We recommend using the compareTo() method of the String class for this. | . import java.util.Arrays; public class Merge{ public static void mergeSort(String[] arr) { if (arr == null || arr.length &lt;= 1) { return; } int mid = arr.length / 2; String[] left = new String[mid]; String[] right = new String[arr.length - mid]; System.arraycopy(arr, 0, left, 0, left.length); System.arraycopy(arr, mid, right, 0, right.length); mergeSort(left); mergeSort(right); merge(left, right, arr); } private static void merge(String[] left, String[] right, String[] arr) { int leftIndex = 0, rightIndex = 0, arrIndex = 0; while (leftIndex &lt; left.length &amp;&amp; rightIndex &lt; right.length) { if (left[leftIndex].compareTo(right[rightIndex]) &lt; 0) { arr[arrIndex++] = left[leftIndex++]; } else { arr[arrIndex++] = right[rightIndex++]; } } while (leftIndex &lt; left.length) { arr[arrIndex++] = left[leftIndex++]; } while (rightIndex &lt; right.length) { arr[arrIndex++] = right[rightIndex++]; } } public static void main(String[] args) { String[] arr = {&quot;banana&quot;, &quot;apple&quot;, &quot;orange&quot;, &quot;pear&quot;, &quot;grape&quot;}; System.out.println(&quot;Before sorting: &quot; + Arrays.toString(arr)); mergeSort(arr); System.out.println(&quot;After sorting: &quot; + Arrays.toString(arr)); } } Merge.main(null); . Before sorting: [banana, apple, orange, pear, grape] After sorting: [apple, banana, grape, orange, pear] . Binary Search Hack # 1 . Given an int array[] = {1, 3, 5, 7, 9, 23, 45, 67}, search the number 45 and give it&#39;s index with Binary search, BUT do this using recursion. Make sure to include informative comments to explain the code as you write the algorithm. | . public class BinarySearchRecursive { /** * Recursive binary search method to find the index of a target number in an array * * @param arr the int array to search * @param target the number to search for * @param low the lower index of the search range * @param high the upper index of the search range * @return the index of the target number in the array, or -1 if not found */ public static int binarySearch(int[] arr, int target, int low, int high) { // base case: search range is empty if (low &gt; high) { return -1; } // calculate the middle index of the search range int mid = (low + high) / 2; // check if the middle element is the target if (arr[mid] == target) { return mid; } // recursively search the left or right half of the array based on the target value if (target &lt; arr[mid]) { return binarySearch(arr, target, low, mid - 1); } else { return binarySearch(arr, target, mid + 1, high); } } public static void main(String[] args) { int[] arr = {1, 3, 5, 7, 9, 23, 45, 67}; int target = 45; int low = 0; int high = arr.length - 1; // call the recursive binary search method int index = binarySearch(arr, target, low, high); // print the result if (index != -1) { System.out.println(&quot;The target number &quot; + target + &quot; is found at index &quot; + index + &quot;.&quot;); } else { System.out.println(&quot;The target number &quot; + target + &quot; is not found in the array.&quot;); } } } BinarySearchRecursive.main(null); . The target number 45 is found at index 6. . Binary Search Hack #2 EC . Given an unsorted array of int[] array = {5, 6, 3, 1, 8, 9, 4, 7, 2}, use merge sort as taught previously and combine learning with this lesson to implement a binary search to find index of the number 7. | . import java.util.Arrays; public class MergeSortBinarySearch { /** * Merge sort method to sort an int array * * @param arr the int array to sort */ public static void mergeSort(int[] arr) { // base case: array has 1 or 0 elements if (arr.length &lt;= 1) { return; } // divide the array into two halves int mid = arr.length / 2; int[] left = Arrays.copyOfRange(arr, 0, mid); int[] right = Arrays.copyOfRange(arr, mid, arr.length); // recursively sort each half mergeSort(left); mergeSort(right); // merge the two sorted halves int i = 0; int j = 0; int k = 0; while (i &lt; left.length &amp;&amp; j &lt; right.length) { if (left[i] &lt;= right[j]) { arr[k] = left[i]; i++; } else { arr[k] = right[j]; j++; } k++; } while (i &lt; left.length) { arr[k] = left[i]; i++; k++; } while (j &lt; right.length) { arr[k] = right[j]; j++; k++; } } /** * Binary search method to find the index of a target number in a sorted array * * @param arr the sorted int array to search * @param target the number to search for * @param low the lower index of the search range * @param high the upper index of the search range * @return the index of the target number in the array, or -1 if not found */ public static int binarySearch(int[] arr, int newTarget, int low, int high) { // base case: search range is empty if (low &gt; high) { return -1; } // calculate the middle index of the search range int mid = (low + high) / 2; // check if the middle element is the target if (arr[mid] == newTarget) { return mid; } // recursively search the left or right half of the array based on the target value if (newTarget &lt; arr[mid]) { return binarySearch(arr, newTarget, low, mid - 1); } else { return binarySearch(arr, newTarget, mid + 1, high); } } public static void main(String[] args) { int[] array = {5, 6, 3, 1, 8, 9, 4, 7, 2}; // sort the array using merge sort mergeSort(array); System.out.println(&quot;Sorted array: &quot; + Arrays.toString(array)); // find the index of the number 7 using binary search int newTarget = 7; int low = 0; int high = array.length - 1; int index = binarySearch(array, newTarget, low, high); // print the result if (index != -1) { System.out.println(&quot;The target number &quot; + newTarget + &quot; is found at index &quot; + index + &quot;.&quot;); } else { System.out.println(&quot;The target number &quot; + newTarget + &quot; is not found in the array.&quot;); } } } MergeSortBinarySearch.main(null); . Sorted array: [1, 2, 3, 4, 5, 6, 7, 8, 9] The target number 7 is found at index 6. .",
            "url": "https://prishab.github.io/my-blog/jupyter/2023/04/18/lessonOne.html",
            "relUrl": "/jupyter/2023/04/18/lessonOne.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Sorts and Algo Rhythmic Part 1",
            "content": "Learning About the different Sorts -- Bubble . Bubble Sort: allows you to sort items in an array in ascending order. Each value checks with the one to its right and sees if it&#39;s less than, greater than, or equal. If the value is less than or equal to the one to its right, no change will occur. However, if it&#39;s greater than the value to its right, a swap occurs. | . Hack 1 -- Bubble Sort . public class BubbleSort { //method to sort an array using Bubble sort public static void bubbleSort(int[] arr) { int n = arr.length; for (int i = 0; i &lt; n - 1; i++) { //loop through unsorted portion of array for (int j = 0; j &lt; n - i - 1; j++) { //If current element is greater than next element, swap if (arr[j] &gt; arr[j + 1]) { // swap int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } } // Main method to test BubbleSort class public static void main(String[] args) { int[] arr = {5, 2, 9, 1, 5, 6}; System.out.println(&quot;Array before sorting:&quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } bubbleSort(arr); System.out.println(&quot; nArray after sorting:&quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } } } BubbleSort.main(null); . Array before sorting: 5 2 9 1 5 6 Array after sorting: 1 2 5 5 6 9 . Learning About the Different Sorts -- Selection . Selection Sort: Can sort in either ascending or descending order. Start by finding the smallest value in the array and putting it at the front or end of the array. | . Hack 2 -- Selection Sort . public class SelectionSort { public static void selectionSort(int[] arr) { int n = arr.length; for (int i = 0; i &lt; n - 1; i++) { int minIndex = i; // Find the minimum element in unsorted part of array for (int j = i + 1; j &lt; n; j++) { if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } // Swap the found minimum element with the first element int temp = arr[minIndex]; arr[minIndex] = arr[i]; arr[i] = temp; } } // Printing out the sorted and unsorted arrays public static void main(String[] args) { int[] arr = {5, 2, 9, 1, 5, 6}; System.out.println(&quot;Array before sorting:&quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } selectionSort(arr); System.out.println(&quot; nArray after sorting:&quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } } } SelectionSort.main(null); . Array before sorting: 5 2 9 1 5 6 Array after sorting: 1 2 5 5 6 9 . Learning About the Different Sorts -- Insertion . Insertion Sort: Compares the value with the value to its right. If it&#39;s greater, the two swap positions. However, if the number on right is less than the one on the left and all the ones behind it, the value gets moved to the back. | . Hack 3 -- Insertion Sort . public class InsertionSort { public static void insertionSort(int[] arr) { int n = arr.length; for (int i = 1; i &lt; n; i++) { int key = arr[i]; int j = i - 1; // Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) { arr[j + 1] = arr[j]; j--; } arr[j + 1] = key; } } //Testing InsertionSort public static void main(String[] args) { int[] arr = {5, 2, 9, 1, 5, 6}; System.out.println(&quot;Array before sorting:&quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } insertionSort(arr); System.out.println(&quot; nArray after sorting:&quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } } } InsertionSort.main(null); . Array before sorting: 5 2 9 1 5 6 Array after sorting: 1 2 5 5 6 9 . Learning About the Different Sorts -- Merge . Merge Sort: Takes an array and keeps splitting it in half until every value in the array is isolated. Then sorts through those independent values and merges them together into an array again. | . Hack 4 -- Merge Sort . public class Merge{ public static void mergeSort(int[] arr) { // base case: array has 1 or 0 elements if (arr.length &lt;= 1) { return; } // divide the array into two halves int mid = arr.length / 2; int[] left = Arrays.copyOfRange(arr, 0, mid); int[] right = Arrays.copyOfRange(arr, mid, arr.length); // recursively sort each half mergeSort(left); mergeSort(right); // merge the two sorted halves int i = 0; int j = 0; int k = 0; while (i &lt; left.length &amp;&amp; j &lt; right.length) { if (left[i] &lt;= right[j]) { arr[k] = left[i]; i++; } else { arr[k] = right[j]; j++; } k++; } while (i &lt; left.length) { arr[k] = left[i]; i++; k++; } while (j &lt; right.length) { arr[k] = right[j]; j++; k++; } } public static void main(String[] args) { int[] array = {7, 8, 2, 4, 5, 3}; // sort the array using merge sort System.out.println(&quot;Unsorted array: &quot; + Arrays.toString(array)); mergeSort(array); System.out.println(&quot;Sorted array: &quot; + Arrays.toString(array)); } } Merge.main(null); . Unsorted array: [7, 8, 2, 4, 5, 3] Sorted array: [2, 3, 4, 5, 7, 8] . Actual Hack 1: Testing Out The Sorts . The following code will run the different sorts and record the time and efficiency of running these sorts. After we will analyze with Big O Notation | . public class SortAnalysis { // generate array of 5000 integers public static int[] generateArray() { int[] arr = new int[5000]; for (int i = 0; i &lt; arr.length; i++) { arr[i] = (int) (Math.random() * 10000); } return arr; } public static float[] main(String[] args) { System.out.println(&quot;-&quot;); // create an array with 5000 elements int[] arr1 = generateArray(); int[] arr2 = new int[5000]; int[] arr3 = new int[5000]; int[] arr4 = new int[5000]; System.arraycopy(arr1, 0, arr2, 0, 5000); System.arraycopy(arr1, 0, arr3, 0, 5000); System.arraycopy(arr1, 0, arr4, 0, 5000); float[] times = new float[4]; String str = &quot;&quot;; // sort the array long start = System.nanoTime(); bubbleSort(arr1); long end = System.nanoTime(); // print the time it took str += ((end - start) + &quot;ns | &quot;); times [0] = (end - start); start = System.nanoTime(); mergeSort(arr2); end = System.nanoTime(); // print the time it took str += ((end - start) + &quot;ns | &quot;); times [1] = (end - start); start = System.nanoTime(); selectionSort(arr3); end = System.nanoTime(); // print the time it took str += ((end - start) + &quot;ns | &quot;); times [2] = (end - start); start = System.nanoTime(); insertionSort(arr4); end = System.nanoTime(); // print the time it took str += ((end - start) + &quot;ns&quot;); times [3] = (end - start); System.out.println(str); return times; } public static void bubbleSort(int[] arr) { int n = arr.length; for (int i = 0; i &lt; n - 1; i++) { for (int j = 0; j &lt; n - i - 1; j++) { if (arr[j] &gt; arr[j + 1]) { // swap arr[j] and arr[j+1] int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } } // instertionsort from before public static void insertionSort(int[] arr) { int n = arr.length; for (int i = 1; i &lt; n; i++) { int key = arr[i]; int j = i - 1; // Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) { arr[j + 1] = arr[j]; j--; } arr[j + 1] = key; } } // selectionsort from before public static void selectionSort(int[] arr) { int n = arr.length; for (int i = 0; i &lt; n - 1; i++) { int minIndex = i; // Find the minimum element in unsorted part of array for (int j = i + 1; j &lt; n; j++) { if (arr[j] &lt; arr[minIndex]) { minIndex = j; } } // Swap the found minimum element with the first element int temp = arr[minIndex]; arr[minIndex] = arr[i]; arr[i] = temp; } } // mergesort from previous lesson public static void mergeSort(int[] arr) { if (arr.length &gt; 1) { int[] left = leftHalf(arr); int[] right = rightHalf(arr); mergeSort(left); mergeSort(right); merge(arr, left, right); } } // lefthalf function for mergesort public static int[] leftHalf(int[] arr) { int size1 = arr.length / 2; int[] left = new int[size1]; for (int i = 0; i &lt; size1; i++) { left[i] = arr[i]; } return left; } // righthalf function for mergesotr public static int[] rightHalf(int[] arr) { int size1 = arr.length / 2; int size2 = arr.length - size1; int[] right = new int[size2]; for (int i = 0; i &lt; size2; i++) { right[i] = arr[i + size1]; } return right; } public static int[] merge(int[] result, int[] left, int[] right) { int i1 = 0; int i2 = 0; for (int i = 0; i &lt; result.length; i++) { if (i2 &gt;= right.length || (i1 &lt; left.length &amp;&amp; left[i1] &lt;= right[i2])) { result[i] = left[i1]; i1++; } else { result[i] = right[i2]; i2++; } } return result; } } System.out.println(&quot;Bubble | Merge | Selection | Insertion&quot;); float[] means = new float[4]; for (int i = 0; i &lt; 12; i++) { float[] a = SortAnalysis.main(null); for (int j = 0; j &lt; 4; j++) { means[j] += a[j]; } } for (int i = 0; i &lt; 4; i++) { means[i] /= 12; means[i] = Math.round(means[i] * 1000) / 1000; } System.out.println(&quot;-&quot;); System.out.println(&quot;Average: &quot; + means[0] + &quot;ns | &quot; + means[1] + &quot;ns | &quot; + means[2] + &quot;ns | &quot; + means[3] + &quot;ns&quot;); . Bubble | Merge | Selection | Insertion - 26359132ns | 384839ns | 11816900ns | 1256602ns - 33477006ns | 413954ns | 11202658ns | 1328927ns - 29693041ns | 331956ns | 7299627ns | 1236973ns - 26638518ns | 535161ns | 10510700ns | 1923411ns - 23286905ns | 365315ns | 7529654ns | 989740ns - 27035507ns | 334038ns | 12639705ns | 1921034ns - 33890913ns | 407079ns | 12685304ns | 1047968ns - 27578112ns | 327123ns | 12292588ns | 1355634ns - 42378441ns | 960447ns | 9081393ns | 1682118ns - 29891726ns | 342660ns | 9673850ns | 1401839ns - 29002366ns | 1027379ns | 12980261ns | 1286304ns - 24768000ns | 338684ns | 9059800ns | 821362ns - Average: 2147483.0ns | 480719.0ns | 2147483.0ns | 1354326.0ns . Big O Notation Notes . Merge Sort: . Time Complexity: O(n log n) | Number of Comparisons: O(n log n) | Number of Swaps: O(n log n) ##### Insertion Sort: | Time Complexity: O(n^2) | Number of Comparisons: O(n^2) | Number of Swaps: O(n^2) ##### Bubble Sort: | Time Complexity: O(n^2) | Number of Comparisons: O(n^2) | Number of Swaps: O(n^2) ##### Selection Sort: | Time Complexity: O(n^2) | Number of Comparisons: O(n^2) | Number of Swaps: O(n) | . Extra Sort Notes . Quick Sort: This algorithm divides the list into two smaller sub-lists around a pivot element and recursively sorts each sub-list. The time complexity of Quick Sort is O(n log n) on average, which means that it can sort a list of n elements in roughly log n recursive steps, with each step taking O(n) time. This algorithm transforms the list into a heap data structure, where each element is larger than its children (for a max heap). It then repeatedly removes the largest element from the heap and places it at the end of the list. The time complexity of Heap Sort is also O(n log n), because it needs to perform log n heapify operations for each of the n elements. | . | . Hashmap Practice . Be sure to have 5000 records | Perform analysis on Binary Search vs HashMap Lookup, try using random to search and find 100 keys in 5000 records. Perform 12 times and throw out high and low. | . import java.util.HashMap; public class HashTester { public static void main(String[] args) { Map&lt;String, String&gt; hashMap = new HashMap&lt;String, String&gt;(); for (int i = 0; i &lt; 5000; i++) { hashMap.put(&quot;key&quot; + i, &quot;value&quot; + i); } // List&lt;Integer&gt; key = new ArrayList&lt;Integer&gt;(); // for (int i = 0, i &lt; 100; i++){ // key.add(i); // } List&lt;String&gt; keys = new ArrayList&lt;String&gt;(hashMap.keySet()); Collections.shuffle(keys); Collections.sort(keys); long startTime = System.nanoTime(); for (int i = 0; i &lt; 100; i++) { // int index = Collections.binarySearch(keys, key); int index = Collections.binarySearch(keys, &quot;key&quot; + i); if (index &gt;= 0) { System.out.println(&quot;Found key: &quot; + keys.get(index) + &quot; with value: &quot; + hashMap.get(keys.get(index))); } } long elapsedTime = System.nanoTime() - startTime; long startTime2 = System.nanoTime(); for (int i = 0; i &lt; 100; i++) { String key = &quot;key&quot; + i; if (hashMap.containsKey(key)) { System.out.println(&quot;Found key: &quot; + key + &quot; with value: &quot; + hashMap.get(key)); } } long elapsedTime2 = System.nanoTime() - startTime2; System.out.println(&quot;Time it took to complete Binary Search in milliseconds: &quot; + elapsedTime/1000000); System.out.println(&quot;Time it took to complete Hash Search in milliseconds: &quot; + elapsedTime2/1000000); } } HashTester.main(null); . Found key: key0 with value: value0 Found key: key1 with value: value1 Found key: key2 with value: value2 Found key: key3 with value: value3 Found key: key4 with value: value4 Found key: key5 with value: value5 Found key: key6 with value: value6 Found key: key7 with value: value7 Found key: key8 with value: value8 Found key: key9 with value: value9 Found key: key10 with value: value10 Found key: key11 with value: value11 Found key: key12 with value: value12 Found key: key13 with value: value13 Found key: key14 with value: value14 Found key: key15 with value: value15 Found key: key16 with value: value16 Found key: key17 with value: value17 Found key: key18 with value: value18 Found key: key19 with value: value19 Found key: key20 with value: value20 Found key: key21 with value: value21 Found key: key22 with value: value22 Found key: key23 with value: value23 Found key: key24 with value: value24 Found key: key25 with value: value25 Found key: key26 with value: value26 Found key: key27 with value: value27 Found key: key28 with value: value28 Found key: key29 with value: value29 Found key: key30 with value: value30 Found key: key31 with value: value31 Found key: key32 with value: value32 Found key: key33 with value: value33 Found key: key34 with value: value34 Found key: key35 with value: value35 Found key: key36 with value: value36 Found key: key37 with value: value37 Found key: key38 with value: value38 Found key: key39 with value: value39 Found key: key40 with value: value40 Found key: key41 with value: value41 Found key: key42 with value: value42 Found key: key43 with value: value43 Found key: key44 with value: value44 Found key: key45 with value: value45 Found key: key46 with value: value46 Found key: key47 with value: value47 Found key: key48 with value: value48 Found key: key49 with value: value49 Found key: key50 with value: value50 Found key: key51 with value: value51 Found key: key52 with value: value52 Found key: key53 with value: value53 Found key: key54 with value: value54 Found key: key55 with value: value55 Found key: key56 with value: value56 Found key: key57 with value: value57 Found key: key58 with value: value58 Found key: key59 with value: value59 Found key: key60 with value: value60 Found key: key61 with value: value61 Found key: key62 with value: value62 Found key: key63 with value: value63 Found key: key64 with value: value64 Found key: key65 with value: value65 Found key: key66 with value: value66 Found key: key67 with value: value67 Found key: key68 with value: value68 Found key: key69 with value: value69 Found key: key70 with value: value70 Found key: key71 with value: value71 Found key: key72 with value: value72 Found key: key73 with value: value73 Found key: key74 with value: value74 Found key: key75 with value: value75 Found key: key76 with value: value76 Found key: key77 with value: value77 Found key: key78 with value: value78 Found key: key79 with value: value79 Found key: key80 with value: value80 Found key: key81 with value: value81 Found key: key82 with value: value82 Found key: key83 with value: value83 Found key: key84 with value: value84 Found key: key85 with value: value85 Found key: key86 with value: value86 Found key: key87 with value: value87 Found key: key88 with value: value88 Found key: key89 with value: value89 Found key: key90 with value: value90 Found key: key91 with value: value91 Found key: key92 with value: value92 Found key: key93 with value: value93 Found key: key94 with value: value94 Found key: key95 with value: value95 Found key: key96 with value: value96 Found key: key97 with value: value97 Found key: key98 with value: value98 Found key: key99 with value: value99 Found key: key0 with value: value0 Found key: key1 with value: value1 Found key: key2 with value: value2 Found key: key3 with value: value3 Found key: key4 with value: value4 Found key: key5 with value: value5 Found key: key6 with value: value6 Found key: key7 with value: value7 Found key: key8 with value: value8 Found key: key9 with value: value9 Found key: key10 with value: value10 Found key: key11 with value: value11 Found key: key12 with value: value12 Found key: key13 with value: value13 Found key: key14 with value: value14 Found key: key15 with value: value15 Found key: key16 with value: value16 Found key: key17 with value: value17 Found key: key18 with value: value18 Found key: key19 with value: value19 Found key: key20 with value: value20 Found key: key21 with value: value21 Found key: key22 with value: value22 Found key: key23 with value: value23 Found key: key24 with value: value24 Found key: key25 with value: value25 Found key: key26 with value: value26 Found key: key27 with value: value27 Found key: key28 with value: value28 Found key: key29 with value: value29 Found key: key30 with value: value30 Found key: key31 with value: value31 Found key: key32 with value: value32 Found key: key33 with value: value33 Found key: key34 with value: value34 Found key: key35 with value: value35 Found key: key36 with value: value36 Found key: key37 with value: value37 Found key: key38 with value: value38 Found key: key39 with value: value39 Found key: key40 with value: value40 Found key: key41 with value: value41 Found key: key42 with value: value42 Found key: key43 with value: value43 Found key: key44 with value: value44 Found key: key45 with value: value45 Found key: key46 with value: value46 Found key: key47 with value: value47 Found key: key48 with value: value48 Found key: key49 with value: value49 Found key: key50 with value: value50 Found key: key51 with value: value51 Found key: key52 with value: value52 Found key: key53 with value: value53 Found key: key54 with value: value54 Found key: key55 with value: value55 Found key: key56 with value: value56 Found key: key57 with value: value57 Found key: key58 with value: value58 Found key: key59 with value: value59 Found key: key60 with value: value60 Found key: key61 with value: value61 Found key: key62 with value: value62 Found key: key63 with value: value63 Found key: key64 with value: value64 Found key: key65 with value: value65 Found key: key66 with value: value66 Found key: key67 with value: value67 Found key: key68 with value: value68 Found key: key69 with value: value69 Found key: key70 with value: value70 Found key: key71 with value: value71 Found key: key72 with value: value72 Found key: key73 with value: value73 Found key: key74 with value: value74 Found key: key75 with value: value75 Found key: key76 with value: value76 Found key: key77 with value: value77 Found key: key78 with value: value78 Found key: key79 with value: value79 Found key: key80 with value: value80 Found key: key81 with value: value81 Found key: key82 with value: value82 Found key: key83 with value: value83 Found key: key84 with value: value84 Found key: key85 with value: value85 Found key: key86 with value: value86 Found key: key87 with value: value87 Found key: key88 with value: value88 Found key: key89 with value: value89 Found key: key90 with value: value90 Found key: key91 with value: value91 Found key: key92 with value: value92 Found key: key93 with value: value93 Found key: key94 with value: value94 Found key: key95 with value: value95 Found key: key96 with value: value96 Found key: key97 with value: value97 Found key: key98 with value: value98 Found key: key99 with value: value99 Time it took to complete Binary Search in milliseconds: 2 Time it took to complete Hash Search in milliseconds: 4 .",
            "url": "https://prishab.github.io/my-blog/jupyter/2023/03/06/tri3Week2.html",
            "relUrl": "/jupyter/2023/03/06/tri3Week2.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Queue Hacks :D",
            "content": "Hack 1 . Add/delete elements from a queue | . public class QueueExample { public static void main(String[] args) { Queue&lt;String&gt; queue = new LinkedList&lt;String&gt;(); // Adding elements to the queue queue.add(&quot;seven&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;seven&quot;); printQueue(queue); queue.add(&quot;slimy&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;slimy&quot;); printQueue(queue); queue.add(&quot;snakes&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;snakes&quot;); printQueue(queue); queue.add(&quot;sallying&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;sallying&quot;); printQueue(queue); queue.add(&quot;slowly&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;slowly&quot;); printQueue(queue); queue.add(&quot;slithered&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;slithered&quot;); printQueue(queue); queue.add(&quot;southward&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;southward&quot;); printQueue(queue); // Removing elements from the queue String data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); } // Helper method to print the contents of the queue public static void printQueue(Queue&lt;String&gt; queue) { System.out.println(&quot;Words count: &quot; + queue.size() + &quot;, data: &quot; + String.join(&quot; &quot;, queue)); System.out.println(); } } QueueExample.main(null); . Enqueued data: seven Words count: 1, data: seven Enqueued data: slimy Words count: 2, data: seven slimy Enqueued data: snakes Words count: 3, data: seven slimy snakes Enqueued data: sallying Words count: 4, data: seven slimy snakes sallying Enqueued data: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued data: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued data: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Dequeued data: seven Words count: 6, data: slimy snakes sallying slowly slithered southward Dequeued data: slimy Words count: 5, data: snakes sallying slowly slithered southward Dequeued data: snakes Words count: 4, data: sallying slowly slithered southward Dequeued data: sallying Words count: 3, data: slowly slithered southward Dequeued data: slowly Words count: 2, data: slithered southward Dequeued data: slithered Words count: 1, data: southward Dequeued data: southward Words count: 0, data: . Hack 2 . Merge 2 queues together | . import java.util.*; public class MergeQueues { public static &lt;T extends Comparable&lt;T&gt;&gt; Queue&lt;T&gt; mergeQueues(Queue&lt;T&gt; queue1, Queue&lt;T&gt; queue2) { Queue&lt;T&gt; mergedQueue = new LinkedList&lt;&gt;(); while (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) { if (queue1.peek().compareTo(queue2.peek()) &lt; 0) { mergedQueue.offer(queue1.poll()); } else { mergedQueue.offer(queue2.poll()); } } while (!queue1.isEmpty()) { mergedQueue.offer(queue1.poll()); } while (!queue2.isEmpty()) { mergedQueue.offer(queue2.poll()); } return mergedQueue; } public static void main(String[] args) { Queue&lt;Integer&gt; queue1 = new LinkedList&lt;&gt;(Arrays.asList(1, 3, 5)); Queue&lt;Integer&gt; queue2 = new LinkedList&lt;&gt;(Arrays.asList(2, 4, 6)); System.out.println(&quot;Queue 1: &quot; + queue1); System.out.println(&quot;Queue 2: &quot; + queue2); Queue&lt;Integer&gt; mergedQueue = mergeQueues(queue1, queue2); System.out.println(&quot;Merged Queue: &quot; + mergedQueue); } } MergeQueues.main(null); . Queue 1: [1, 3, 5] Queue 2: [2, 4, 6] Merged Queue: [1, 2, 3, 4, 5, 6] . Explanation of Hack 2 . The generic method mergeQueues takes two queues (queue1 and queue2) as arguments and returns a new queue mergedQueue | Method uses a while loop to compare the front elements of both queues and add the smaller element to the new queue | The method then adds the remaining elements of the non-empty queue to the new queue. Finally returns the merged queue. | . In the main method, we create two integer queues queue1 and queue2 with some values and merge them using the mergeQueues method. We then print the merged queue using System.out.println. . Hack 3 . Shuffle Items | . import java.util.*; public class ShuffleQueue { public static void main(String[] args) { Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;(Arrays.asList(1, 2, 3, 4, 5)); System.out.println(&quot;//Start with ordered Queue: &quot;); System.out.println(queue); // Shuffle the elements in the queue Collections.shuffle((List&lt;Integer&gt;) queue); System.out.println(&quot;//Finish with shuffled Queue: &quot;); // Display the shuffled elements in the queue while (!queue.isEmpty()) { System.out.print(queue.poll() + &quot; &quot;); } } } ShuffleQueue.main(null); . //Start with ordered Queue: [1, 2, 3, 4, 5] //Finish with shuffled Queue: 5 3 2 4 1 . Hack 3 Explanation . Created an integer queue queue with some values | Then use the Collections.shuffle() method to shuffle the elements in the queue The method takes a List as an argument, so we cast the queue to a list using (List)&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; Finally, display the shuffled elements in the queue using a while loop and the poll() method to remove and return the front element of the queue | &lt;/ul&gt; When you run this code, you should see the elements in the queue displayed in a random order. The output will vary each time you run the program, depending on how the elements are shuffled. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Hack 4 . Use a stack to reverse queue values | . import java.util.*; public class ReverseQueueUsingStack { public static &lt;T&gt; void reverseQueue(Queue&lt;T&gt; queue) { Stack&lt;T&gt; stack = new Stack&lt;&gt;(); while (!queue.isEmpty()) { stack.push(queue.poll()); } while (!stack.isEmpty()) { queue.offer(stack.pop()); } } public static void main(String[] args) { Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;(Arrays.asList(1, 2, 3, 4, 5)); System.out.println(&quot;Original Queue: &quot; + queue); reverseQueue(queue); System.out.println(&quot;Reversed Queue: &quot; + queue); } } ReverseQueueUsingStack.main(null); . Original Queue: [1, 2, 3, 4, 5] Reversed Queue: [5, 4, 3, 2, 1] . Hack 4 Explained . Define a generic method reverseQueue that takes a Queue queue as an argument and reverses the order of its elements using a Stack | The method creates a new Stack stack and uses a while loop to push all the elements of the Queue into the Stack, one by one | Then uses another while loop to pop each element from the Stack and enqueue it back into the Queue | Finally, the method returns the reversed Queue | . In the main method, we create an integer queue queue with some values and display its original order. We then call the reverseQueue method to reverse the order of the elements in the Queue and display the reversed order. . &lt;/div&gt; | . | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2023/03/06/tri3Week1.html",
            "relUrl": "/jupyter/2023/03/06/tri3Week1.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Blogging Upload Feature on Website",
            "content": "Extra Seed Point . Java Addition . | Method 1, using built in Java program Integer.toBinaryString . | . import java.util.Scanner; class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); int num1 = myObj.nextInt(); System.out.println(&quot;Number 1: &quot; + num1); int num2 = myObj.nextInt(); System.out.println(&quot;Number 2: &quot; + num2); int decSum = num1 + num2; // Output input by user System.out.println(&quot;Decimal addition sum: &quot; + Integer.toBinaryString(decSum)); System.out.println(&quot;Final Result: &quot; + num1 + &quot; + &quot; + num2 + &quot; = &quot; + Integer.toBinaryString(decSum)); } } Main.main(null); . Number 1: 1 Number 2: 1 Decimal addition sum: 10 Final Result: 1 + 1 = 10 . Method 2, custom method...divide decimal by value... Remainder becomes binary value and divide quotient by 2 until you are left with 0 (since it&#39;s using integers it&#39;ll eventually come down to 1/2 which equals 0) | . | . import java.util.Scanner; class Main { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); int num1 = myObj.nextInt(); System.out.println(&quot;Number 1: &quot; + num1); int num2 = myObj.nextInt(); System.out.println(&quot;Number 2: &quot; + num2); int decSum = num1 + num2; int n = decSum; long binNum = 0; int remainder; int i = 1; while (n!=0) { remainder = n % 2; n /= 2; binNum += remainder * i; i *= 10; } System.out.println(&quot;Decimal addition sum: &quot; + binNum); System.out.println(&quot;Final Result: &quot; + num1 + &quot; + &quot; + num2 + &quot; = &quot; + binNum); } } Main.main(null); . Number 1: 1 Number 2: 1 Decimal addition sum: 10 Final Result: 1 + 1 = 10 . Tech Talk -- Data Types in Java . Primitive Data Types Collegeboard wants... . int | double | idr man | . | Primitive data types are value only . | Local variables == all the variables in the method --&gt; can see them in debugger . If you hover over classes/variables you can see the value and/or the reference to the value | . | Two data types in Java...Primitive and Reference... . Reference means inside of a structure, you have pointers to memory location...two types | Objects | Arrays | Primitive is a local value...right there in memory | . | Wrapper classes . Class that wraps a primitive data type into an object... | Example is int vs Integer...int is a primitive data type that stores 32-bit signed two&#39;s complement integer while the Integer is a class that wraps a primitive type int in an object | The primitive stores int values in memory while the wrapper converts the primitive data type into an object and to convert an object into the primitive data type | . | Auto-boxing:basically what wrapper does...you are putting a box around the value to be used later . | . // Both of these create new objects Integer n = 5; // Auto-boxing, Integer n = new Integer(5); n += 5; // Auto-boxing, Integer n = new Integer(n + 5); . Objects and arrays are complex data structures... Objects are instances of classes that encapsulate data and behavior --&gt; allows for more flexibility in terms of what data types you want to store | Arrays are collections of data of the same type | . | . public class IntByValue { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n += 10: n = &quot; + n); // prints 5 n = n += 10; System.out.println(&quot; tAfter n += 10: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 5; System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 } } IntByValue.main(null); . Main method before changeInt(n): n = 5 In changeInt method Before n += 10: n = 5 After n += 10: n = 15 Main method after changeInt(n): n = 5 . When swapping values, you need to have a temp location since the values might get damaged if they just directly swapped | . Hack 1 . Start with some small code excercises . Write a Jupyter notebook code example on the following primitive types with a code example (4 to 5 lines), preference would be using array and methods like substring and random as applicable: int, double, boolean, char. | Now convert each of the examples to corresponding Wrapper classes, using arrays. | Expression of these in Class or PBL forms is an option. But the review must be easy for me to see work. | . import java.util.Random; public class Main { public static void main(String[] args) { // int int myInt = 10; System.out.println(myInt); // double double myDouble = 3.14; System.out.println(myDouble); // boolean boolean myBool = true; System.out.println(myBool); // char String myString = &quot;hello world&quot;; char myChar = myString.charAt(1); // get the second character System.out.println(myChar); // using substring method String substring = myString.substring(1, 5); // get a substring from the second to the fifth character System.out.println(substring); // using Random class Random rand = new Random(); int myRandomInt = rand.nextInt(10) + 1; // get a random integer between 1 and 10 System.out.println(myRandomInt); } } Main.main(null); . 10 3.14 true e ello 1 . import java.util.Random; public class Main { public static void main(String[] args) { // Integer array Integer[] myIntArr = {10, 20, 30}; System.out.println(myIntArr[0]); // Double array Double[] myDoubleArr = {3.14, 2.718, 1.414}; System.out.println(myDoubleArr[1]); // Boolean array Boolean[] myBoolArr = {true, false, true}; System.out.println(myBoolArr[2]); // Character array String myString = &quot;hello world&quot;; Character[] myCharArr = new Character[myString.length()]; for (int i = 0; i &lt; myString.length(); i++) { myCharArr[i] = myString.charAt(i); System.out.println(myCharArr[i]); } // using substring method on String array String[] myStringArr = {&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;}; String substring = myStringArr[1].substring(0, 3); // get a substring from the second element in the array System.out.println(substring); // using Random class on Integer array Random rand = new Random(); Integer[] myRandomIntArr = new Integer[10]; for (int i = 0; i &lt; 10; i++) { myRandomIntArr[i] = rand.nextInt(10) + 1; } System.out.println(myRandomIntArr[5]); } } Main.main(null); . 10 2.718 true h e l l o w o r l d ban 1 . Hack 2 . Based on Mr. M&#39;s code...answer the following... . Answer what are Methods and Control Structures Methods are blocks of code which only run when called upon. Control structures are coding methods where you code your data according to research questions or topics. There are typically 3 main types of code structures...sequences, selections, and loops. | . | Explore AP FRQ that teaches us about Methods and Control Structures FRQ See below. | . | Look at Diverse Arrays, Matrix in Teacher code and see if you think this is Methods and Control structures. It would appear that they are methods and control structures. You can see blocks of code that need to be called upon and examples of loops, sequences, and selections. | . | Look at Diverse Arrays,Matrix in Teacher code an see if you thing this fits Data Types. There are integers which is an example of a data type. Therefore, the code does have data types. | . | Math.random is covered in Number, this Teacher code associated with random is critical knowledge when taking the AP Exam. Random numbers in range like 7 to 9 is very important. OK | . | Review DoNothingByValue, what is key knowledge here? There are multiple data types being utilized in a single method. | . | Review IntByReference, what is key knowledge here? There is a conditionally built swap method. | . | Review Menu code. Try, Catch, Runnable are used to control program execution. See if there is a way to get this to work in Jupyter Notebooks. | . package com.nighthawk.hacks.methodsDataTypes; import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; DoNothingByValue.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } } . Hack 3 . 2019 FRQ...I did questions 3 and 4, Pranavi did 1 and 2 . 3A A string containing text and possibly delimiters has been split into tokens and stored in String[] tokens. Each token is either an open delimiter, a close delimiter, or a substring that is not a delimiter. You will write the method getDelimitersList, which returns an ArrayList containing all the open and close delimiters found in tokens in their original order. The following examples show the contents of an ArrayList returned by getDelimitersList for different open and close delimiters and different tokens arrays. . public ArrayList&lt;String&gt; getDelimitersList(String[] tokens) { ArrayList&lt;String&gt; d = new ArrayList&lt;String&gt;(); for (String str : tokens) { if (str.equals(openDel) || str.equals(closeDel)) { d.add(str); } } return d; } . 3B Write the method isBalanced, which returns true when the delimiters are balanced and returns false otherwise. The delimiters are balanced when both of the following conditions are satisfied; otherwise, they are not balanced. . When traversing the ArrayList from the first element to the last element, there is no point at which there are more close delimiters than open delimiters at or before that point. The total number of open delimiters is equal to the total number of close delimiters. Consider a Delimiters object for which openDel is &quot;&quot; and closeDel is &quot;&quot;. The examples below show different ArrayList objects that could be returned by calls to getDelimitersList and the value that would be returned by a call to isBalanced. . public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int openDels = 0; int closeDels = 0; for (String del : delimiters) { if (del.equals(openDel)) { openDels++; } else { closeDels++; } if (closeDels &gt; openDels) { return false; } if (openDels == closeDels) { return true; } else { return false; } } return openDels == closeDels; } . 4A Write the constructor for the LightBoard class, which initializes lights so that each light is set to on with a 40% probability. The notation lights[r][c] represents the array element at row r and column c. . public LightBoard(int numRows, int numCols) { lights = new boolean[numRows][numCols]; for (int r = 0; r &lt; numRows; r++) { for (int c = 0; c &lt; numCols; c++) { double rnd = Math.random(); lights[r][c] = rnd &lt; 0.4; } } } . 4B Write the method evaluateLight, which computes and returns the status of a light at a given row and column based on the following rules. . If the light is on, return false if the number of lights in its column that are on is even, including the current light. If the light is off, return true if the number of lights in its column that are on is divisible by three. Otherwise, return the light’s current status. For example, suppose that LightBoard sim = new LightBoard(7, 5) creates a light board with the initial state shown below, where true represents a light that is on and false represents a light that is off. Lights that are off are shaded. . public boolean evaluateLight(int row, int col) { int numOn = 0; for (int r = 0; r &lt; lights.length; r++) { if (lights[r][col]) { numOn++; } } if (lights[row][col] &amp;&amp; numOn % 2 == 0) { return false; } if (!lights[row][col] &amp;&amp; numOn % 3 == 0) { return true; } return lights[row][col]; } . MC Review -- 35/39 . Q13: Given the int variable and Mystery method... . Assume that numbers has been initialized with the following values. . {17, 34, 21, 42, 15, 69, 48, 25, 39} . Which of the following represents the order of the values in numbers as a result of the call mystery(3)? . Right Answer and Explanation: {17, 20, 21, 42, 45, 69, 48, 51, 39} . Correct. The values of the loop control variable k starts at 1 and is incremented by 3 as long as k is less than numbers.length. As a result, k will have the values 1, 4, 7 and then when it becomes 10, the loop will end. Only the values in numbers at indexes 1, 4, and 7 will be updated to the value of the sum of the element at the index that is one less than k (the element before the one being updated) and 3. So, numbers[1] will be assigned the value of numbers[0] + 3 or 20, numbers[4] will be assigned the value of numbers[3] + 3 or 45, and numbers[7] will be assigned the value of numbers[6] + 3 or 51. All other values will be unchanged. | . Q18: What is printed as a result of executing the following statement? . System.out.println(404 / 10 * 10 + 1); . Right Answer and Explanation:401- Correct. The first operation that is executed is 404 / 10. Since both 404 and 10 are integers, integer division is used resulting in 40. The value 40 is then multiplied by 10, resulting in 400, and finally 1 is added, meaning 401 is printed. . Q19: Given the code segment... . The following conditions have been proposed to replace / condition / in the code segment. . x &lt; 0 . x &lt;= 1 . x &lt; 10 . For which of the conditions will nothing be printed? . Right Answer and Explanation: I, II, and III . Correct. In condition I, the while loop will not execute, since 1, the value of x, is not less than 0, so nothing will be printed. In condition II, the while loop will execute one time, since 1, the value of x is less than or equal to 1, however, 1 is not even, so nothing will be printed. The value of x will then be incremented to 3, which is not less than or equal to 1, and the loop will terminate. In condition III, the while loop will execute for x having the value 1, 3, 5, 7, and 9. When x becomes 11 the loop will terminate. Even though the loop executes multiple times, the values assigned to x are not even, so nothing is printed. | . Q20: Considering the Mystery method... . Assume that nums has been declared and initialized as an array of integer values. Which of the following best describes the value returned by the call mystery(nums) ? . Right Answer and Explanation: An index of a value that occurs most often in nums . Correct. The outer loop starts at 0 and loops through all the indices in arr. The inner loop starts at the index that is one more than outer and iterates through all indices to the right of this element. For each iteration of the inner loop, the element at the current value of outer is compared with each subsequent element. If the elements are equal, then count is incremented. This results in counting the number of occurrences of each value in the arr. After the inner loop terminates, if the number of occurrences of the current value is greater than previous highest count, the new count is assigned to m and the index of this element is stored in index. The method then returns the value of index, which represents the index of a value that occurs most often in nums. | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2023/03/06/tri3Week0.html",
            "relUrl": "/jupyter/2023/03/06/tri3Week0.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Blogging Upload Feature on Website",
            "content": "Original Code . I had originally written some code that didn&#39;t save the data in volumes Volumes is a persistent folder meaning items stored there are saved after the project is shut down | Not storing in Volumes can result in the files getting deleted --&gt; won&#39;t be there next time user logs in | . | Let&#39;s dive into Mr. M&#39;s code since mine is just a simplified version of his | . UploadController.java . Two major parts to the controller... Uploader Responsible for collecting the file, converting it into bytes to be stored, and storing required metadata in database (this feature currently not functioning) | . | Upload Responsible for taking the uploaded files and displaying them to the user | I had initially thought the code would loop through volumes and compile the images in a list but it appears it only lists the files the user just uploaded? Or maybe that&#39;s because I am working on localhost instead of a deployed site? Or maybe it&#39;s cuz the database is not working. Still need to figure these questions out | . | . | . Uploader Code... . // uploader page: filesystem and database management of uploaded image @PostMapping(&quot;/mvc/uploader&quot;) public String mvcUploader(@RequestParam(&quot;filename&quot;) MultipartFile formFile, Model modelMap) { /* * The static directory is loaded at startup. UploadING images or makING changes * to any files or * folders under the static folder will not reflect as ApplicationContext is * already initialized. */ String filePath = &quot;volumes/uploads/&quot;; // thus, uploads defined outside of static for dynamic updates String webPath = &quot;/&quot; + filePath; // webPath // A database table, using Upload POJO, is remembers location of upload and // associated metadata Upload repoFile = new Upload(); repoFile.setFile(webPath + formFile.getOriginalFilename()); repoFile.setType(formFile.getContentType()); repoFile.setSize(formFile.getSize()); // try/catch is in place, but error handling is not implemented (returns without // alerts) try { // Creating the directory to store file File dir = new File(filePath); if (!dir.exists()) dir.mkdirs(); // Create the file on server byte[] bytes = formFile.getBytes(); // File write alternatives (going with Stream for now as in theory it would be // non-blocking) String path = filePath + formFile.getOriginalFilename(); File serverFile = new File(path); BufferedOutputStream stream = new BufferedOutputStream( new FileOutputStream(serverFile)); stream.write(bytes); stream.close(); // JPA save repo.save(repoFile); } catch (IOException e) { e.printStackTrace(); // app stays alive, errors go to run console, /var/log/syslog } // Redirect back to action page return &quot;redirect:/mvc/upload&quot;; } . Break down... . URL for calling the function is /mvc/uploader | Takes the multipart file (like an image for example) that the user inputs | Directs all files to a directory in volumes titled uploads | The following creates the uploads directory if it didn&#39;t already exist. If it does exist, the code will continue without executing this section | . File dir = new File(filePath); if (!dir.exists()) dir.mkdirs(); . The following code is supposed to add metadata of the uploaded file to a database table...but it wasn&#39;t doing that...need to figure out why | . Upload repoFile = new Upload(); repoFile.setFile(webPath + formFile.getOriginalFilename()); repoFile.setType(formFile.getContentType()); repoFile.setSize(formFile.getSize()); . The code following that takes the file and converts it to bytes since that&#39;s how the code can read and store the file. . byte[] bytes = formFile.getBytes(); . Then the code puts the file in volumes/uploads and saves it for the next user login | Utilizes output string to do this --&gt; take bytes and stores them in a location | . String path = filePath + formFile.getOriginalFilename(); File serverFile = new File(path); BufferedOutputStream stream = new BufferedOutputStream( new FileOutputStream(serverFile)); stream.write(bytes); stream.close(); // JPA save repo.save(repoFile); . Upload Code... . // user action page: upload controls and displays a history of images @GetMapping(&quot;/mvc/upload&quot;) public String mvcUpload(Model model) { List&lt;Upload&gt; files = repo.findAll(); // extract image history System.out.println(&quot;Number of files uploaded: &quot; + files.size()); for (int i = 0; i &lt; files.size(); i++) { System.out.println(files.get(i).getFile()); } model.addAttribute(&quot;files&quot;, files); return &quot;mvc/upload&quot;; } . Breakdown... . This part of the controller stores in a list all the values associated with the file based on upload class in upload.java | List files is a list of the files the user uploaded&lt;/li&gt; The print line and for loop was just for me to test...in the terminal it prints how many files are saved in the upload list --&gt; realized that this only takes into account recently uploaded files | Code ends with running the html file stored in resources/mvc Originally tried to create upload.html in frontend...although I could call the frontend html file, I got a cross origins error (iirc) and decided to just have the file be in backend | OMG I JUST REALIZED maybe it&#39;s cuz Github pages doesn&#39;t support post method? So either way it wouldn&#39;t have worked out I think | . | &lt;/ul&gt; Upload.html . (Commented out code is just me testing and trying to display the image lol) | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt;&lt;p id=&quot;para-test&quot;&gt;Uploaded Images: &lt;/p&gt; &lt;form enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot;&gt; &lt;!-- &lt;image th:src=&quot;@{__${files.file}__}&quot; width=&quot;150px&quot;&gt;&lt;/image&gt; &lt;image src=&quot;/volumes/uploads/ahemKamisatoKids.png&quot;&gt;&lt;/image&gt;--&gt; &lt;div id=&quot;image-list&quot; th:each=&quot;file : ${files}&quot;&gt; &lt;h4 th:text=&quot;${file.file}&quot; /&gt; &lt;image th:src=&quot;${file.file}&quot; width=&quot;150px&quot;&gt;&lt;/image&gt; &lt;!-- Other Properties --&gt; &lt;/div&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; . &lt;body&gt;&lt;p id=&quot;para-test&quot;&gt;Uploaded Images: &lt;/p&gt; &lt;form enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot;&gt; . Since uploaded item is an image...enctype is multipart/form-data --&gt; images are multipart files | . &lt;div id=&quot;image-list&quot; th:each=&quot;file : ${files}&quot;&gt; &lt;h4 th:text=&quot;${file.file}&quot; /&gt; &lt;image th:src=&quot;${file.file}&quot; width=&quot;150px&quot;&gt;&lt;/image&gt; . The above code snippet takes the image-list from the mvcUpload class in controller and displays it along with the file name --&gt; name taken from the stored metadata | . MvcConfig.java . This is where the resource handlers are stored. Needed to serve static resources (things that aren&#39;t server generated but need to be sent to the browser once they are requested) | Used resourceHandler and resourceLocations...Handler is handling the static files while Locations is assigning a location to permanently store them --&gt; needed to make volumes persistent | . @Override public void addResourceHandlers(final ResourceHandlerRegistry registry) { registry.addResourceHandler(&quot;/volumes/uploads/**&quot;).addResourceLocations(&quot;file:volumes/uploads/&quot;); } . Upload2.html . Frontend code... | . &lt;script&gt; function uploadFile() { alert(&quot;Hello Prisha&quot;+ fileInput.files[0].name); var innerhtml = document.getElementById(&quot;img-test&quot;).innerHTML; console.log(&quot;testing&quot;); var formdata = new FormData(); formdata.append(&quot;filename&quot;, fileInput.files[0]); var requestOptions = { method: &#39;POST&#39;, body: formdata, redirect: &#39;follow&#39; }; console.log(&quot;before calling the URL&quot;); fetch(&quot;http://localhost:8192/mvc/uploader&quot;, requestOptions) .then(response =&gt; response.text()) .then(result =&gt; console.log(result)) .catch(error =&gt; console.log(&#39;error&#39;, error)); alert(&quot;Completed&quot;); } &lt;/script&gt; . Fetch request to backend...alerts and consoles intertwined for testing (initially the code ran but no result was seen, needed to include alerts for debugging) | . &lt;html&gt; &lt;body&gt; &lt;form id=&#39;formid&#39;&gt; &lt;input type=&quot;file&quot; name=&quot;fileInput&quot; id=&quot;fileInput&quot;&gt; &lt;button onclick=&quot;uploadFile()&quot; name=&quot;submit&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;br&gt; &lt;iframe id=&quot;img-test&quot; src=&quot;http://localhost:8192/mvc/upload&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt; &lt;/iframe&gt; &lt;/body&gt; &lt;/html&gt; . Html button to call code. The iframe feature is used to display the mvc/upload.html in backend. | . &lt;/div&gt; | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2023/03/01/uploadBlog.html",
            "relUrl": "/jupyter/2023/03/01/uploadBlog.html",
            "date": " • Mar 1, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Title",
            "content": "52 Question Quiz Corrections . What I got wrong . toc:true - badges: true | comments: true | categories: [jupyter] | image: | . Quiz Score . 51/52 . Incorrect Question... . Question 1 . Question: Consider the following code segment. | . int[][] anArray = new int[10][8]; for (int j = 0; j &lt; 8; j++) { for (int k = 0; k &lt; 10; k++) { anArray[j][k] = 5; } } . The code segment causes an ArrayIndexOutOfBoundsException to be thrown. How many elements in anArray will be set to 5 before the exception is thrown? | Correct Answer: 8 | Explanation: I just counted wrong...I included the last value in the column when in reality the function would have stopped there | . General Reflections on Test . Took me too long to complete the quiz, should have been able to finish it faster. | .",
            "url": "https://prishab.github.io/my-blog/2023/01/31/secondtestcorrections.html",
            "relUrl": "/2023/01/31/secondtestcorrections.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "66 Question Quiz Corrections",
            "content": "Quiz Score . 58/66 . Incorrect Questions... . Question 12 . Question: Assume that x and y have been declared and initialized with int values. Consider the following Java expression. | . (y &gt; 10000) || (x &gt; 1000 &amp;&amp; x &lt; 1500) . Which of the following is equivalent to the expression given above? | Correct Answer: | . (y &gt; 10000 || x &gt; 1000) || (y &gt; 10000 || x &lt; 1500) . Explanation: The original expression evaluates to true when either y is greater than 10000 or x is between 1000 and 1500. If the value of y is greater than 10000, this equivalent expression will evaluate to true since it is used in both of the or (||) expressions. If y is not greater than 10000, the only way the equivalent expression can evaluate to true is if x is between 1000 and 1500. | . Question 13 . Question: Assume that x and y are boolean variables and have been properly initialized. | . (x || y) &amp;&amp; x . Which of the following always evaluates to the same value as the expression above? | Correct Answer: x | Explanation: For the expression to evaluate to true, the expressions on either side of the &amp;&amp; operator must be true. If x is true then x || y is true regardless of the value of y, meaning (x || y) &amp;&amp; x evaluates to true. If x is false, the expression evaluates to false regardless of the value of (x || y). | . Question 36 . Question: Consider the following declarations. | . Actor a = new Actor(); Bug b = new Bug(); Rock r = new Rock(); Critter c = new Critter(); . Consider the following lines of code. | . Line 1: int dir1 = c.getDirection(); Line 2: int dir2 = a.getDirection(); Line 3: int dir3 = b.getDirection(); Line 4: ArrayList rLoc = r.getMoveLocations(); Line 5: ArrayList cLoc = c.getMoveLocations();&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Which of the lines of code above will cause a compile time error? | Correct Answer: Line 4 only | Explanation: Not entirely sure lol | . Question 40 . Question: Consider the following data field and method. Method maxHelper is intended to return the largest value among the first numVals values in an array; however, maxHelper does not work as intended. | . private int[] nums; // precondition: 0 &lt; numVals &lt;= nums.length private int maxHelper(int numVals) { //Line 1: int max = maxHelper(numVals - 1); //Line 2: if (max &gt; nums[numVals - 1]) return max; else return nums[numVals - 1]; } . Which of the following corrects the method maxHelper so that it works as intended? | Correct Answer: Insert the following statement before Line 1. | . if (numVals == 1 return nums[0]; . Explanation: I&#39;m just bad | . Question 51 . Question: Consider the following method, which returns an int based on its parameter x. | . public static int puzzle(int x) { if (x &gt; 20) { x -= 2; } else if (x % 2 == 0) // Line 7 { x += 4; } return x; } . Consider a modification to the method that eliminates the else from line 7 so that line 7 becomes | . if (x % 2 == 0) // Modified line 7 . For which of the following values of x would the return values of the original method and the modified method differ? | Correct Answer: 22 | Explanation: In the original method, the call puzzle(22) returns 20. The first condition evaluates to true, so x is decreased by two and 20 is returned. In the original method, when the condition in the if statement evaluates to true, the second condition, in the else if clause, is not evaluated. For the modified method, the first condition still evaluates to true and x is decreased by two. But now the second condition appears in an if statement, instead of in an else if clause, so the second condition is evaluated, found to be true, and x is increased by four. This results in the value 24 being returned. | . Question 53 . Question: Consider the following two methods, which are intended to return the same values when they are called with the same positive integer parameter n. | . public static int mystery1(int n) { if (n &gt; 1) { return 5 + mystery1(n - 1); } else { return 1; } } public static int mystery2(int n) { int total = 0; int x = 1; while (x &lt; n) { total += 5; x++; } return total; } . Which, if any, of the following changes to mystery2 is required so that the two methods work as intended? | Correct Answer: The variable total should be initialized to 1. | Explanation: TBH I guessed on this one so I don&#39;t really know how to get the right answer | . Question 54 . Question: Consider the following recursive method. | . public static boolean recurMethod(String str) { if (str.length() &lt;= 1) { return true; } else if (str.substring(0, 1).compareTo(str.substring(1, 2)) &gt; 0) { return recurMethod(str.substring(1)); } else { return false; } } . Which of the following method calls will return true? | Correct Answer: recurMethod(&quot;edcba&quot;) | Explanation: If the first character of str is lexicographically greater than the second character of str, the method returns the result of the recursive call with a parameter that contains all but the first character of str. If the first character of str is lexicographically less than or equal to the second character of str, the method returns false. If no such character pair (where the first character of str is lexicographically less than or equal to the second character of str) is found, the base case is reached and the value true is returned. | . Question 60 . Question: Consider a shuffle method that is intended to return a new array that contains all the elements from nums, but in a different order. Let n be the number of elements in nums. The shuffle method should alternate the elements from nums [0] … nums[n / 2 – 1] with the elements from nums[n / 2] …nums[n – 1], as illustrated in the following examples. | The following implementation of the shuffle method does not work as intended. | . public static int [] shuffle(int[] nums) { int n = nums.length; int[] result = new int[n]; for (int j = 0; j &lt; n / 2; j++) { result[j * 2] = nums[j]; result[j * 2 + 1] = nums[j + n / 2]; } return result; } . Which of the following best describes the problem with the given implementation of the shuffle method? | Correct Answer: The last element of the returned array (result [result.length − 1] ) may not have the correct value. | Explanation: Not really sure here either, same reason as the last last question. | . General Reflections on Test . Need to read questions more thoroughly and review Java syntax a bit more | I got 8 wrong on the Test which would mean I scored 58/66...I can definitely do better especially since I had to search up a lot of the questions to get help on them | I should definitely look over all the units and review them. | . &lt;/div&gt; .",
            "url": "https://prishab.github.io/my-blog/jupyter/2023/01/23/testcorrections.html",
            "relUrl": "/jupyter/2023/01/23/testcorrections.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Final Review of Lessons 7-10",
            "content": "ArrayList Notes . 7.1 Intro to ArrayLists . Arrays: Static, Static (fixed size), Fundamental java feature, An object with no methods, Not as flexible, Can store more primitive data, Slightly slower than Arrays | ArrayLists: Dynamic (can change size) Part of a framework, A class with many methods, Designed to be more flexible, Store object references, Can only be used with an import statement | . Primitive Data Types: . boolean | char | double | int | . Wrapper Class Data Types (Store the primitive values as objects) . Boolean | Character | Double | Integer | . 7.2 ArrayList Methods . size(); --&gt; Returns the number of elements in the list add(obj); --&gt; Adds element at the end add(index, object); --&gt; Adds element at specific index remove(index); --&gt; Removes element from specific index set(index, object); --&gt; Replaces element at index with new object get(index); --&gt; Returns element at index . 7.3 Traversing ArrayLists . 2 ways --&gt; for loops and enhanced for loops | use get() instead of bracket notation for getting an element of an arraylist | use size() to find number of elements in arraylist instead of using .length | . 7.4 Developing Algorithms Using ArrayLists . They can... . Modify array values | Find the max value | Find the min value | . 7.5 Searching . Important to remember... . When looking at int values, the == operator should be used. | When searching for a double value, we need to make sure the value is close enough by doing some math. | Object instances should always use the .equals(otherThing) method to check for a match. | . 7.6 Sorting . Selection sort identifies either the maximum or minimum of the compared values and iterates over the structure checking if the item stored at the index matches the condition, if so, it will swap the value stored at the index and continue. | The insertion sort is characterized by building a sorted structure as it proceeds. It inserts each value it finds at the appropriate location in the data structure. This is often accomplished by using a while loop as the inner loop. | . 7.7 Ethical Issues around Data Collection . More data --&gt; more to protect --&gt; more likely leak will happen | Delete things you don&#39;t need anymore | Ensure important data is encrypted | . 2D Array Lesson Notes . 2D Array Vocab . Array = a data structure used to implement a collection (list) of primitive or object reference data Element = a single value in the array Index = the position of the element in the array (starts from 0) Array Length = the number of elements in the array . - Is public, so can be accessed in any class - Is also final, so can’t change it after array has been created . The Basics . A 2D array is an array of arrays and can be a better way to store data Declaring a 2D array: . - ``DataType[][] nameOf2DArray`` . Initializing a 2D array . - ``DataType[][] nameOf2DArray = new DataType[r][c];`` - r = # of rows - The # of arrays in the array - r = list.length - c = # of columns - The # of elements in the inner arrays - ``c = list[0].length`` . Example of Initializing Sample Array . public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[1][2] = 6 arr[2][1] = 8 . list[list.length - 1][list[0].length - 1] | Updating an element: list[r][c] = value; | . Nested Loops: . You can use Nested Loops to traverse 2D Arrays For ex: to print out an entire array in order, you needt o use these | . | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Make sure your columns for loop is always inside your rows for loop! Unless you want it printed thte other way of course | . | Print spaces and lines in between to make a neater matrix | . Searching for a Value in a 2D Array: . Here&#39;s a quick example to illustrate: | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Inheritance Lesson Notes . What is Inheritance? . Base class with subclasses extending base class | For example, you have cars...cars all have tires, wheel, engine, etc Some cars have special features in addition, those cars can be in the original class with the base features but then extend and have extra | . | . SuperClass . The base class is known as the SuperClass | Protected: an access modifier --&gt; the attribute isn&#39;t affected by outside modifiers | . public class Car { protected String brandName; protected double range; protected double doorNumber; protected double maxSpeed; // Constructor for the attributes present in the superclass public Car(String brandName, double range, double doorNumber, double maxSpeed) { this.brandName = brandName; this.range = range; this.doorNumber = doorNumber; this.maxSpeed = maxSpeed; } public void gas () { System.out.println(&quot;Go!&quot;); } public void brake () { System.out.println(&quot;Stop!&quot;); } public void gearShift () { System.out.println(&quot;Use the stick&quot;); } public void steer () { System.out.println(&quot;turning left...&quot;); } public void horn () { System.out.print(&quot;honking... &quot;); } } public class TeslaModelS extends Car { // Additional attribute not present in the superclass protected String hornSound; // Constructor for Subclass public TeslaModelS(String brandName, double range, double doorNumber, double maxSpeed, String hornSound) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(brandName, range, doorNumber, maxSpeed); // hornSound is not in the Superclass, so we add it separately in the constructor this.hornSound = hornSound; } // We use override to change the functionality in the subclass of an existing method in the superclass @Override public void gearShift () { System.out.println(&quot;Use the gear selector next to the wheel&quot;); } public void steer () { System.out.println(&quot;turning right...&quot;); } // Here, we don&#39;t fully change the functionality of the existing horn method in the superclass // Instead, we take all of the functionality of the superclass method, and then add on to it public void horn () { super.horn(); System.out.println(hornSound); } public static void main(String[] args) { // 5 argument constructor TeslaModelS modelS = new TeslaModelS(&quot;Tesla&quot;, 396, 4, 200, &quot;eugh&quot;); // Example of late binding Car car = new TeslaModelS(&quot;Tesla&quot;, 396, 4, 200, &quot;brrr&quot;); // We can still use the methods from the child class, even though we didn&#39;t mention them in the subclass! modelS.gas(); // Using the overridden method modelS.gearShift(); modelS.steer(); // Using the method we added on to modelS.horn(); car.horn(); } } TeslaModelS.main(null); . Go! Use the gear selector next to the wheel turning right... honking... eugh honking... brrr . Writing Constructors for Subclasses . Subclass example in the previous code is the TeslaModelS class | . Overriding Methods . Pretty much allows you to change a previously defined method to better fit the subclass | . Super Keyword . super keyword --&gt; use constructors in the superclass and methods in the superclass in a child class | TeslaModelS --&gt; super keyword can be found in constructor and the method horn When it says super(brandName, range, doorNumber, maxSpeed) in the constructor, super keyword is used to utilize super class constructor inside child class | super.horn() calling horn() from parent class Car | . | . Creating References Using Inheritance Hierarchies . Type diagram: similar appearance to a family tree. A is superclass/head of the family. Descendants are subclasses public class A public class B extends A public class C extends B | . | A reference refers to an object of the class or object of an inherited class | . Polymorphism . means &quot;many forms&quot; --&gt; one thing in many ways through inheritance | can have two different implementations through overriding methods This is known as Runtime Polymorphism | . | Method overloading: two methods with same name but different arguments and functionalities Compile Time Polymorphism or Static Polymorphism | . | Early binding: when compiler decides which method should be called | Late binding: when method is decided at runtime | . Object Superclass . Important things to know Object class is superclass of all other classes in java | Object is part of the java.lang package --&gt; known for imports | Important Object class methods include: boolean equals(Object x) &amp; String toString() | Object class&#39; subclass override the equals and toStrong methods | . | toString Method Prints out the attributes of an object | Converts string object into a string | . | equals Method Compares two strings | Returns a boolean value of true if equal...otherwise returns false | . | . Recursion Lesson Notes . 10.1 Recursion . Recursive method is a method that calls itself | Two parts to the method: base case | recursive case | . | Base case reached where recursion stops and value is returned write first to avoid infinite recursion | . | Recursive calls == part of a method | Recursive methods have a call stack that keeps track of all times recursive function is called | Recursions similar to loops --&gt; recursion can be written as loops | Iteration vs Recursion Iteration used when a set of instructions are executed repeatedly until the condition becomes false | Recursion used when solution to a bigger problem can be expressed in terms of smaller problems | Main difference: recursion uses funtion calls...iteration uses for and while loops | . | . 10.2 Binary Search, Linear Recursion, Selection Sort, and Merge Sort . Binary search algorithm: . Data must be sorted | Keep halving array until you find value | more efficient than linear search | . | Linear Recursion: . Function that only makes a single call to istelf each time it&#39;s run | . | Selection Sort: . Repeatedly find the minimum element from the unsorted part and putting it at the end of the sorted | . | Merge Sort: . Can be used to sort ArrayList structures | Use divide and conquer algorithm | divides input array into two halves, call itself for two halves, and then merges the two sorted halves | merge() function is used for merging two halves | . | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/12/15/finalunitreview.html",
            "relUrl": "/jupyter/2022/12/15/finalunitreview.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Inheritance Unit 9",
            "content": "What is Inheritance? . Base class with subclasses extending base class | For example, you have cars...cars all have tires, wheel, engine, etc Some cars have special features in addition, those cars can be in the original class with the base features but then extend and have extra | . | . SuperClass . The base class is known as the SuperClass | Protected: an access modifier --&gt; the attribute isn&#39;t affected by outside modifiers | . public class Car { protected String brandName; protected double range; protected double doorNumber; protected double maxSpeed; // Constructor for the attributes present in the superclass public Car(String brandName, double range, double doorNumber, double maxSpeed) { this.brandName = brandName; this.range = range; this.doorNumber = doorNumber; this.maxSpeed = maxSpeed; } public void gas () { System.out.println(&quot;Go!&quot;); } public void brake () { System.out.println(&quot;Stop!&quot;); } public void gearShift () { System.out.println(&quot;Use the stick&quot;); } public void steer () { System.out.println(&quot;turning left...&quot;); } public void horn () { System.out.print(&quot;honking... &quot;); } } public class TeslaModelS extends Car { // Additional attribute not present in the superclass protected String hornSound; // Constructor for Subclass public TeslaModelS(String brandName, double range, double doorNumber, double maxSpeed, String hornSound) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(brandName, range, doorNumber, maxSpeed); // hornSound is not in the Superclass, so we add it separately in the constructor this.hornSound = hornSound; } // We use override to change the functionality in the subclass of an existing method in the superclass @Override public void gearShift () { System.out.println(&quot;Use the gear selector next to the wheel&quot;); } public void steer () { System.out.println(&quot;turning right...&quot;); } // Here, we don&#39;t fully change the functionality of the existing horn method in the superclass // Instead, we take all of the functionality of the superclass method, and then add on to it public void horn () { super.horn(); System.out.println(hornSound); } public static void main(String[] args) { // 5 argument constructor TeslaModelS modelS = new TeslaModelS(&quot;Tesla&quot;, 396, 4, 200, &quot;eugh&quot;); // Example of late binding Car car = new TeslaModelS(&quot;Tesla&quot;, 396, 4, 200, &quot;brrr&quot;); // We can still use the methods from the child class, even though we didn&#39;t mention them in the subclass! modelS.gas(); // Using the overridden method modelS.gearShift(); modelS.steer(); // Using the method we added on to modelS.horn(); car.horn(); } } TeslaModelS.main(null); . Go! Use the gear selector next to the wheel turning right... honking... eugh honking... brrr . Writing Constructors for Subclasses . Subclass example in the previous code is the TeslaModelS class | . Hack 1 . // Creating animal superclass and giving it two attributes public class Animals{ protected String color; protected double numberOfLegs; // Creating animals constructor public Animals(String color, double numberOfLegs){ this.color = color; this.numberOfLegs = numberOfLegs; } } // Creating wolf subclass and giving it claws attribute public class Wolf extends Animals { protected String hasClaws; // Creating a constructor for subclass public Wolf(String color, double numberOfLegs, String hasClaws){ super(color, numberOfLegs); this.hasClaws = hasClaws; } public static void main(String[] args) { Wolf Wolf = new Wolf(&quot;gray&quot;, 4, &quot;true&quot;); } } Wolf.main(null); . Overriding Methods . Pretty much allows you to change a previously defined method to better fit the subclass | . Hack 2 . // Creating animals superclass and giving it two attributes public class Animals{ protected String color; protected double numberOfLegs; // Creating animals constructor public Animals(String color, double numberOfLegs){ this.color = color; this.numberOfLegs = numberOfLegs; } public void tail(){ System.out.println(&quot;This animal does not have a tail.&quot;); } } // Creating wolf subclass and giving it claws attribute public class Wolf extends Animals { protected String hasClaws; // Creating a constructor for subclass public Wolf(String color, double numberOfLegs, String hasClaws){ super(color, numberOfLegs); // Third attribute this.hasClaws = hasClaws; } // Utilizing override @Override public void tail() { System.out.println(&quot;This animal does have a tail.&quot;); } public static void main(String[] args) { System.out.println(&quot;The following displays information about a wolf species:&quot;); Wolf Wolf = new Wolf(&quot;gray&quot;, 4, &quot;true&quot;); Wolf.tail(); } } Wolf.main(null); . The following displays information about a wolf species: This animal does have a tail. . Super Keyword . super keyword --&gt; use constructors in the superclass and methods in the superclass in a child class | TeslaModelS --&gt; super keyword can be found in constructor and the method horn When it says super(brandName, range, doorNumber, maxSpeed) in the constructor, super keyword is used to utilize super class constructor inside child class | super.horn() calling horn() from parent class Car | . | . Creating References Using Inheritance Hierarchies . Type diagram: similar appearance to a family tree. A is superclass/head of the family. Descendants are subclasses public class A public class B extends A public class C extends B | . | A reference refers to an object of the class or object of an inherited class | . Polymorphism . means &quot;many forms&quot; --&gt; one thing in many ways through inheritance | can have two different implementations through overriding methods This is known as Runtime Polymorphism | . | Method overloading: two methods with same name but different arguments and functionalities Compile Time Polymorphism or Static Polymorphism | . | Early binding: when compiler decides which method should be called | Late binding: when method is decided at runtime | . Hack 3 . // Creating animals superclass public class Animals{ protected String color; protected double numberOfLegs; public Animals(String color, double numberOfLegs){ this.color = color; this.numberOfLegs = numberOfLegs; } public void tail(){ System.out.println(&quot;This animal does not have a tail.&quot;); } public void lifeSpan(){ System.out.println(&quot;Lifespan for this animal is unknown.&quot;); } } // Creating wolf subclass and giving it attributes public class Wolf extends Animals { protected String hasClaws; //Creating wolf constructor public Wolf(String color, double numberOfLegs, String hasClaws){ super(color, numberOfLegs); this.hasClaws = hasClaws; } // Utilizing override @Override public void tail() { System.out.println(&quot;This animal does have a tail.&quot;); } //Utilizing override @Override public void lifeSpan() { System.out.println(&quot;This animal&#39;s average lifespan ranges from 14 to 16 years of age.&quot;); } public static void main(String[] args) { System.out.println(&quot;The following displays information about a wolf species:&quot;); Wolf Wolf = new Wolf(&quot;gray&quot;, 4, &quot;true&quot;); Wolf.tail(); Wolf.lifeSpan(); } } //Creating fish subclass public class Fish extends Animals { // Fish subclass constructor public Fish(String color, double numberOfLegs){ super(color, numberOfLegs); } @Override public void tail() { System.out.println(&quot;This animal does have a tail.&quot;); } public void lifeSpan(int a, int b) { System.out.println(&quot;This animal&#39;s average lifespan ranges from &quot; + a + &quot; to &quot; + b + &quot; years of age.&quot;); } public static void main(String[] args) { System.out.println(&quot;The following displays information about a fish species:&quot;); Fish Fish = new Fish(&quot;silver&quot;, 0); Fish.tail(); Fish.lifeSpan(6, 14); } } Wolf.main(null); Fish.main(null); . The following displays information about a wolf species: This animal does have a tail. This animal&#39;s average lifespan ranges from 14 to 16 years of age. The following displays information about a fish species: This animal does have a tail. This animal&#39;s average lifespan ranges from 6 to 14 years of age. . Object Superclass . Important things to know Object class is superclass of all other classes in java | Object is part of the java.lang package --&gt; known for imports | Important Object class methods include: boolean equals(Object x) &amp; String toString() | Object class&#39; subclass override the equals and toStrong methods | . | toString Method Prints out the attributes of an object | Converts string object into a string | . | equals Method Compares two strings | Returns a boolean value of true if equal...otherwise returns false | . | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/12/13/Inheritance.html",
            "relUrl": "/jupyter/2022/12/13/Inheritance.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "2D Array Week 8",
            "content": "Learning Objective! . Represent collections of related primitive and object reference data using two dimensional array objects. . 2D Array Vocab . Array = a data structure used to implement a collection (list) of primitive or object reference data Element = a single value in the array Index = the position of the element in the array (starts from 0) Array Length = the number of elements in the array . - Is public, so can be accessed in any class - Is also final, so can’t change it after array has been created . The Basics . A 2D array is an array of arrays and can be a better way to store data Declaring a 2D array: . - ``DataType[][] nameOf2DArray`` . Initializing a 2D array . - ``DataType[][] nameOf2DArray = new DataType[r][c];`` - r = # of rows - The # of arrays in the array - r = list.length - c = # of columns - The # of elements in the inner arrays - ``c = list[0].length`` . Initializing a Sample Array: . public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[1][2] = 6 arr[2][1] = 8 . Accessing and Updating Elements of a 2D Array: . nameOf2DArray[r][c] | . Hack 1: Access the last element of the 2D Array List: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; System.out.println(arr[arr.length - 1][arr[0].length - 1]); } } Test.main(null); . i . a quick tip for the future: list[list.length - 1][list[0].length - 1] | Updating an element: list[r][c] = value; | . | . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; arr[2][0] = &quot;Athens&quot;; System.out.println(arr[2][0]); // Change Austin to Athens and print! System.out.println(&quot;Successfully changed Austin to Athens and printed!&quot;); } } Test.main(null); . Athens Successfully changed Austin to Athens and printed! . Nested Loops: . You can use Nested Loops to traverse 2D Arrays For ex: to print out an entire array in order, you needt o use these | . | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Make sure your columns for loop is always inside your rows for loop! Unless you want it printed thte other way of course | . | Print spaces and lines in between to make a neater matrix | . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 3; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } // Print out the array without using numerical values! } } Test.main(null); . Atlanta Baltimore Chicago Australia Boston Cincinnati Austin Beaumont Columbus . Searching for a Value in a 2D Array: . Here&#39;s a quick example to illustrate: | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Note: in the code, you see hte use of : which essentially means within | . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; for (int i = 0; i &lt; arr.length; i++){ for (int j = 0; j &lt; arr[i].length; j++){ if (longest.length() &lt; arr[i][j].length()) { longest = arr[i][j]; } } } System.out.println(longest); String shortest = arr[0][0]; for (int i = 0; i &lt; arr.length; i++){ for (int j = 0; j &lt; arr[i].length; j++){ if (shortest.length() &gt; arr[i][j].length()) { shortest = arr[i][j]; } } } System.out.println(shortest); } } Test.main(null); . Cincinnati Boston . HW . Please submit screenshots of your 4 hacks up and running to our Google Form, which also has a few 2D array related multiple choice questions. . Additionally, Complete and send a screenshot of your code for 2017 FRQ Q4: Successor Array in that same google form. . Please submit as a pair or group. . 2017 FRQ 4 A-B . public static Position findPosition(int num, int[][] intArr) { for (int row=0; row &lt; intArray.length; row++) { for (int col=0; col &lt; intArray[0].length; col++) { if (intArray[row][col] == num) { return new Position(rol, col); } } } return.null; } . public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] newArray = new Position[intArray.length][intArray[0].length]; for (int row=0; row &lt; intArray.length; row++) { for (int col=0; col &lt; intArray[0].length; col++) { newArray[row][col] = findPosition(intArray[row][col]+1, intArray); } } return newArray; } . Extra Credit -- Christmas Tree . public class ChristmasTree { public static void main(String[] args) { for (int i = 0; i &lt; 10; i++) { for (int j = 0; j &lt; 10 - i; j++) System.out.print(&quot; &quot;); for (int k = 0; k &lt; (2 * i + 1); k++) System.out.print(&quot;*&quot;); System.out.println(); } } } ChristmasTree.main(null); . * *** ***** ******* ********* *********** ************* *************** ***************** ******************* .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/12/06/2DArrays.html",
            "relUrl": "/jupyter/2022/12/06/2DArrays.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Vocabulary and its Integration",
            "content": "Type Casting in Java . when you assign a value of one primitive data type to another type. . Two types of casting in Java: . - Widening Casting (automatically) - converting a smaller type to a larger type size byte -&gt; short -&gt; char -&gt; int -&gt; long -&gt; float -&gt; double - Narrowing Casting (manually) - converting a larger type to a smaller size type double -&gt; float -&gt; long -&gt; int -&gt; char -&gt; short -&gt; byte . Casting, specifically for Division . Integer and integer resulting in integer | If you want it to become a decimal, make it into a double | Type promotion (with an integer and a double value) makes it more complicated, resulting in the decimal | . //example public class Variables { public static void main (String[] args) { } } System.out.println(10.0/15); . 0.6666666666666666 . public class Variables { public static void main(String[] args) { } } int x=10; int y=15; System.out.println(1 / 3); System.out.println(1.0 / 3); System.out.println(1 / 3.0); System.out.println((double) x / y); //type promote; produces decimal answer . 0 0.3333333333333333 0.3333333333333333 0.6666666666666666 . //modulus public class Variables { public static void main(String[] args) { }} System.out.println(15%10); . 5 . Casting, specifically for Truncating or Rounding . Truncation vs. Rounding . Rounding a number in the range [2.5, 3.5) returns the number 3 | Truncating a number in the range [3.0, 4.0) returns the number 3 | Where a square bracket &#39;[&#39; denotes inclusion in the range, and a parenthesis &#39;(&#39; denotes non-inclusion in the range -- ie. [3.0, 4.0) is the range of all numbers between 3 and 4, including 3 but not including 4. | truncation; chops off decimal portion | . //truncation public class truncation { public static void main(String[] args) {}} //example int a, b, c; double d, e; //declare variables a = 5; b = -13; d = 2.8; c = a + (int)d; //typecasting //truncation, cut off decimal //d became 2 instead of 2.8, so 2 + 5 = 7 System.out.println(&quot;c is: &quot; + c); . c is: 7 . //rounding public class rounding { public static void main(String[] args) {}} double number = 2.8; System.out.println( &quot;before rounding: &quot; + number ); number = Math.round(number); System.out.println( &quot;after rounding: &quot; + number ); double number = 2.4; System.out.println( &quot;before rounding: &quot; + number ); number = Math.round(number); System.out.println( &quot;after rounding: &quot; + number ); . before rounding: 2.8 after rounding: 3.0 before rounding: 2.4 after rounding: 2.0 . Wrapper Classes . Why wrap int, double, etc? | way to use primitive data types as objects | . Primitive Data Type Wrapper Class . byte | Byte | . short | Short | . int | Integer | . long | Long | . float | Float | . double | Double | . boolean | Boolean | . char | Character | . Primitive type and corresponding wrapper class | Wrapper classes are used to convert any data type into an object. The primitive data types are not objects; they do not belong to any class; they are defined in the language itself. Sometimes, it is required to convert data types into objects in Java language. | . public class wrappers { public static void main(String[] args) {}} // int x = 10; // System.out.println(x.toString()); doesn&#39;t work because x is a primitive data type, not a modifiable object Integer x = new Integer(10); //to get around this, you define an integer wrapper class System.out.println(x.toString()); //x is now an object, not a primitive data type Integer x = new Integer(15); . 10 . Concatenation . Appendage of Strings | . //ex String firstName = &quot;John &quot;; String lastName = &quot;Doe&quot;; System.out.println(firstName.concat(lastName)); . John Doe . class concatenation { public static void main(String arg[]) { } } String str1 = &quot;hello&quot;, str2 = &quot; to you&quot;, str3 = &quot; too&quot;; str1 = str1 + str2 + str3; // LINE A System.out.println(str1); //line a is &#39;+&#39; operator str2 = str2.concat(str3); System.out.println(str2); //line B //concat() method boolean folklore = true; boolean evermore = false; System.out.println(&quot;Folklore is a great album.&quot; + &quot; nThis statement is &quot; + folklore); // LINE C System.out.println(&quot;Folklore is a bad album.&quot; + &quot; nThis statement is &quot; + evermore); //concatenation of a boolean to a string . hello to you too to you too Folklore is a great album. This statement is true Folklore is a bad album. This statement is false . Math Classes (Random Usage) . Methods to perform math tasks on numbers | random() returns a random number between 0 (inclusive) and 1 | Public static double random | . import java.lang.Math; //java.lang.Math.random() class random { // driver code public static void main(String args[]) { } } double rand = Math.random(); System.out.println(&quot;Random Number:&quot; + rand); . Random Number:0.13816735220066045 . Compound Boolean Expressions . Test two things to be true before body of conditional is executed | &#39;&amp;&amp;&#39; used as logical operator and to join 2 booleans | . //ex //want to play video games, but parents only let you if you&#39;ve finished your homework and taken a shower public class compoundBooleans { public static void main(String[] args) { boolean didHomework = true; boolean tookShower = false; if (tookShower &amp;&amp; didHomework) { System.out.println(&quot;You can play&quot;); } else { System.out.println(&quot;No, you can&#39;t play&quot;); } } } . Truth Tables and De Morgan&#39;s Law . Simplification of booleans through truth tables | Organized way to define a boolean function | De Morgan&#39;s law: De Morgan&#39;s first law states that the complement of the union of two sets A and B is equal to the intersection of the complement of the sets A and B. | . //demorgans law //has to be back home before 10, and has to walk the dog public class demorgans { public static void main(String[] args) { boolean backby10 = true; boolean walkedDog = false; if (!(backby10 &amp;&amp; walkedDog)) //means not A OR not B { System.out.println(&quot;True. You were back by 10 but didn&#39;t walk the dog&quot;); } else { System.out.println(&quot;You were back in time and walked the dog&quot;); }}} . public class demorgans { public static void main(String[] args) { boolean backby10 = true; boolean walkedDog = false; if (!(backby10 || walkedDog)) //means not A AND not B { System.out.println(&quot;False. You were back by 10 but didn&#39;t walk the dog&quot;); } else { System.out.println(&quot;You were back in time and walked the dog&quot;); } } } . Comparing Numbers . use == or compareTo() method | . //comparing numbers public class wrappers { public static void main(String[] args){} } int x = 10; int y = 14; if(x==(y)) { System.out.println(&quot;Both x and y are equal&quot;); } else System.out.println(&quot;x and y are not equal&quot;); . x and y are not equal . public class wrappers { public static void main(String[] args){} } // int x = 10; // System.out.println(x.toString()); doesn&#39;t work because x is a primitive data type, not a modifiable object Integer x = new Integer(10); //to get around this, you define an integer wrapper class System.out.println(x.compareTo(15)); //x is now an object, not a primitive data type System.out.println(x.compareTo(5)); //-1 is b/c 10 is less than 15 //1 is because 5 is less than 10 . -1 1 . int xy = 83; int yz = 20; int compare = Integer.compare(xy, yz); if(compare&gt;0) { System.out.println(&quot;xy is greater than yz&quot;); } else if (compare&lt;0){ System.out.println(&quot;xy is less than yz&quot;); } else System.out.println(&quot;xy and yz are equal&quot;); . xy is greater than yz . Comparing Strings . Use .equals() or == | equals() used to check if 2 strings contain the same content | . class comparingStrings{ public static void main(String args[]){ } } String s1=&quot;hello&quot;; String s2=&quot;goodbye&quot;; String s3=new String(&quot;hello&quot;); String s4=&quot;you&#39;re a good friend&quot;; String s5=&quot;goodbye&quot;; if (s2 == s5){ System.out.println(&quot;true&quot;); } System.out.println(s1.equals(s2)); System.out.println(s1.equals(s3)); System.out.println(s1.equals(s4)); . true false true false . Comparing Objects . use .equals() or == | checks if an object is null, or if attributes are the same | . class Food { //attributes String cuisine; String name; int mealsConsumed; //constructor Food(String cuisine, String name, int mealsConsumed) { this.cuisine = cuisine; this.name = name; this.mealsConsumed = mealsConsumed; } } //objects Food Dal1 = new Food(&quot;Indian&quot;, &quot;Mango Dal&quot;, 10); Food Dal2 = new Food(&quot;Indian&quot;, &quot;Moong Dal&quot;, 4); System.out.println(&quot;Dal1 = Dal2 is &quot; + Dal1.equals(Dal2)); . Dal1 = Dal2 is false . For, While, Nested Loops . while loop . executed while something is happening | iterates over elements | can be infinite if boolean is always true | . do-while loop . condition is checked after executed statements | . for loop . certain amt of loops thru code block | . nested loop . loop w/in loop | . for-each loop . traverses an array in java | . While Loop . int x = 10; while (i&lt;10) { System.out.println(i); i++; } . public class arrays { public static void main(String[] args) { }} public static void main(String[] args) { int[] numbers = {2, 4, 6, 8, 10}; int i = 0; while (i &lt; numbers.length) { System.out.println(numbers[i]); i++; }} . Do-While Loop . int i = 0; do { System.out.println(i); i++; } while (i &lt; 5); . 0 1 2 3 4 . For/For-Each Loop . int i = 0; do { System.out.println(i); i++; } while (i &lt; 5); . 0 1 2 3 4 . //for-each loop int arr[]={10,20,30,40,50}; for(int j:arr){ System.out.println(j); } . 10 20 30 40 50 . Writing Classes . blueprint for objects | has constructors, methods, variables, attributes | objects are instances of a class | attributes are components | methods are object actions | public/private -- accessible/not accessible outside the class | constructors initialize instance variables when objects are created | Naming Conventions: CamelCase (simple, descriptive, straightforward) | . class Food { //attributes private String cuisine; private String name; private int mealsConsumed; //instance variables //constructor Food(String cuisine, String name, int mealsConsumed) { this.cuisine = cuisine; this.name = name; this.mealsConsumed = mealsConsumed; } public String getName(){ return name; } } public class Foodmain { public static void main(String[] args) { Food newFood = new Food(&quot;Indian&quot;, &quot;Idli&quot;, 20); System.out.println(newFood.getName()); } } Foodmain.main(null) . Idli . import java.util.Scanner; //allows scanners to be in program public class averages { public static void main(String[] args) { }} Scanner in = new Scanner(System.in); //creates a scanner System.out.print(&quot;Input 1st number: &quot;); //asks user for input int num1 = in.nextInt(); //saves number and goes to next int System.out.println(num1); System.out.print(&quot;Input 2nd number: &quot;); //same as above int num2 = in.nextInt(); System.out.println(num2); System.out.println(&quot;The average of those numbers are &quot; + (num1 + num2)/(2)); //prints out //num you want to divide is however many numbers you want to average out averages.main(null) . Input 1st number: 3 Input 2nd number: 5 The average of those numbers are 4 . Constructors . no return b/c not directly called | called for object creation | initialize and set values for objects | . public class Main {//main class int modelYear; String modelName;//attributes public Main(int year, String name) {//constructor modelYear = year; modelName = name; } public static void main(String[] args) { Main myCar = new Main(1969, &quot;Mustang&quot;);//objects System.out.println(myCar.modelYear + &quot; &quot; + myCar.modelName); } } // Outputs 1969 Mustang Main.main(null); . 1969 Mustang . Accessor &amp; Mutator methods . accessor methods: return private variable values . access to instance variables | don&#39;t take parameters | return type matches type of variable they&#39;re accessing | getters | . mutator methods: called setters . set the value | void return type; no return value | . //basic example public class Person { private String name; // private = restricted access // Getter public String getName() { return name; } // Setter public void setName(String newName) { this.name = newName; } } . Static/Class Variables . static variables: common property of all objects; not unique . gets memory only once | makes memory efficient | . import java.util.Scanner; public class Main { //static variables private static String[] words = {&quot;words&quot;, &quot;to&quot;, &quot;put&quot;, &quot;in&quot;}; private static String word = words[(int) (Math.random() * words.length)]; private static String asterisk = new String(new char[word.length()]).replace(&quot; 0&quot;,&quot;*&quot;); private static int count = 0; public static void main(String[] args) { Scanner sc = new Scanner(System.in); //create a while loop when count is less than 7 and //when asterisk contains * while (count &lt; 7 &amp;&amp; asterisk.contains(&quot;*&quot;)) { //print guess any letter in the word //print asterisk //take in guess and scan it in (string guess and take in scan) //hang(guess) System.out.println(&quot;Guess any letter in the word&quot;); System.out.println(asterisk); String guess = sc.next(); hang(guess); } sc.close(); }} . Public, Private, Protected; Access Modifiers . private; only accessed within class | protected; within/outside package, accessible only through child class | public - open access | . //private import java.util.*; //import scanner public class Main { private static String reverse_str_order(String input_sentence) { // if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } } return stringBuilder.toString(); } } public static void main(String[] args) { //prepares for scanning Scanner scanner = new Scanner(System.in); System.out.print(&quot;Input string: &quot;); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + reverse_str_word(input)); } . //public import java.util.*; //import scanner public class Main { public static String reverse_str_order(String input_sentence) { // if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } } return stringBuilder.toString(); } } public static void main(String[] args) { //prepares for scanning Scanner scanner = new Scanner(System.in); System.out.print(&quot;Input string: &quot;); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + reverse_str_word(input)); } . //protected import java.util.*; //import scanner public class Main { protected static String reverse_str_order(String input_sentence) { // if (input_sentence == null) { throw new IllegalArgumentException(&quot;Null&quot;); //no empty strings } StringBuilder stringBuilder = new StringBuilder(); String[] words = input_sentence.split(&quot; &quot;); for (int i = words.length - 1; i &gt;= 0; i--) { stringBuilder.append(words[i]); //place words in order if (i != 0) { //keep going until no more words are left stringBuilder.append(&quot; &quot;); } } return stringBuilder.toString(); } } public static void main(String[] args) { //prepares for scanning Scanner scanner = new Scanner(System.in); System.out.print(&quot;Input string: &quot;); //asks for user input String input = scanner.nextLine(); //takes in next line System.out.println(&quot; nResult: &quot; + reverse_str_word(input)); } . Static/Class methods . belong to class, not object | accessed through class | . public class friends { // instance variables private String name; private String email; private String phoneNumber; // Static counter variable public static int personCounter = 0; // static method to print out counter public static void printPersonCounter() { System.out.println(&quot;Person counter: &quot; + personCounter); } // constructor public friends(String initName, String initEmail, String initPhone) { name = initName; email = initEmail; phoneNumber = initPhone; personCounter++; } // toString() method public String toString() { return name + &quot;: &quot; + email + &quot; &quot; + phoneNumber; } // main method for testing public static void main(String[] args) { // call the constructor to create a new person friends p1 = new friends(&quot;Sana&quot;, &quot;sana@gmail.com&quot;, &quot;123-456-7890&quot;); friends p2 = new friends(&quot;Jean&quot;, &quot;jean@gmail.com&quot;, &quot;404 899-9955&quot;); friends.printPersonCounter(); } } . //class methods public class Main { static void myMethod() { System.out.println(&quot;Hello World!&quot;); } } //methods declared within a class . this Keyword . current object in method/constructor | eliminates confusion b/w attributes/parameters w/ the same name | . //ex public class Main { int x; // Constructor with a parameter public Main(int x) { this.x = x; } //this used to // Call the constructor public static void main(String[] args) { Main myObj = new Main(5); System.out.println(&quot;Value of x = &quot; + myObj.x); } } . main method, tester methods . main method runs main code | tester method tests main code | . Inheritance, extends . extends: extends a class, inherits information from another class | subclass; class inherits from another class | superclass; parent class being inherited from | . //ex class school { protected String brand = &quot;work&quot;; // attribute public void pencil() { // method System.out.println(&quot;write, write!&quot;); } } class classwork extends school { private String modelName = &quot;google doc&quot;; // attribute public static void main(String[] args) { // Create a new school object School mySchool = new School(); // Call the pencil() method (from the school class) on the work object mySchool.pencil(); // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class System.out.println(mySchool.brand + &quot; &quot; + mySchool.modelName); } } . Subclass constructor, super Keyword . subclass; inheriting class | super: refers to parent objects; calls superclass methods | . Overloading a method, same name different parameters . java feature allowing classes to have more than one method that is named the same (but it must have different parameters) | easier to overload one instead of having to define two identically-functioning methods | . Overriding a method, same signature of a method . when a subclass has the same method has the parent class | implements a certain aspect of method declared by a parent class | . Abstract Class, Abstract Method . is a method that has just the method definition but no actual implementation | can be subclassed, not instantiated | . Standard methods: toString(), equals(), hashCode() . toString returns string | hashCode returns hashCode of a string | . public class toString { public static void main(String[] args) {}} Integer x = new Integer(10); System.out.println(x.toString()); System.out.println(x.toString(90)); . 10 90 . public class hashCode { public static void main(String[] args) {}} String str_New = &quot;yay!&quot;; System.out.println(str_New.hashCode()); . 3701712 . Late binding of object . name of method looked up at runtime | compiler doesn&#39;t perform argument checks and leaves it up to runtime | . Polymorphism . class has different implementations of a method | same action performed differently | . Big O notation for Hash map, Binary Search, Single loop, Nested Loop . language for runtime length | related to efficiency | . hashmap: single operation to obtain position of a searched element . O(1) binary search . O(1) eliminates half the elements each time single loop . O(n) The next loop executes N times, if we assume the statement inside the loop is O(1), then the total time for the loop is N*O(1), which equals O(N) also known as linear time nested loop . O(N*N) the first loop may execute N times, but for how many first loop executes, the inner loop executes N times .",
            "url": "https://prishab.github.io/my-blog/2022/12/05/blog.html",
            "relUrl": "/2022/12/05/blog.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Array List Week 7",
            "content": "Notes . 7.1 Intro to ArrayLists . Arrays: Static, Static (fixed size), Fundamental java feature, An object with no methods, Not as flexible, Can store more primitive data, Slightly slower than Arrays | ArrayLists: Dynamic (can change size) Part of a framework, A class with many methods, Designed to be more flexible, Store object references, Can only be used with an import statement | . Primitive Data Types: . boolean | char | double | int | . Wrapper Class Data Types (Store the primitive values as objects) . Boolean | Character | Double | Integer | . 7.2 ArrayList Methods . size(); --&gt; Returns the number of elements in the list add(obj); --&gt; Adds element at the end add(index, object); --&gt; Adds element at specific index remove(index); --&gt; Removes element from specific index set(index, object); --&gt; Replaces element at index with new object get(index); --&gt; Returns element at index . 7.3 Traversing ArrayLists . 2 ways --&gt; for loops and enhanced for loops | use get() instead of bracket notation for getting an element of an arraylist | use size() to find number of elements in arraylist instead of using .length | . 7.4 Developing Algorithms Using ArrayLists . They can... . Modify array values | Find the max value | Find the min value | . 7.5 Searching . Important to remember... . When looking at int values, the == operator should be used. | When searching for a double value, we need to make sure the value is close enough by doing some math. | Object instances should always use the .equals(otherThing) method to check for a match. | . 7.6 Sorting . Selection sort identifies either the maximum or minimum of the compared values and iterates over the structure checking if the item stored at the index matches the condition, if so, it will swap the value stored at the index and continue. | The insertion sort is characterized by building a sorted structure as it proceeds. It inserts each value it finds at the appropriate location in the data structure. This is often accomplished by using a while loop as the inner loop. | . 7.7 Ethical Issues around Data Collection . More data --&gt; more to protect --&gt; more likely leak will happen | Delete things you don&#39;t need anymore | Ensure important data is encrypted | . Hack Number 1 . Experimenting with arrayList . // HACK!!!! // Create an arrayList and use one of the cool methods for it import java.util.ArrayList; public class hack1 { public static void main (String[] args) { ArrayList&lt;String&gt; omoriChara = new ArrayList&lt;String&gt;(Arrays.asList(&quot;Mari&quot;, &quot;Hero&quot;, &quot;Aubrey&quot;, &quot;Basil&quot;, &quot;Kel&quot;, &quot;Sunny&quot;)); System.out.println(&quot;There are &quot; + omoriChara.size() + &quot; characters still alive&quot;); omoriChara.remove(&quot;Mari&quot;); System.out.println(&quot;There are now &quot; + omoriChara.size() + &quot; characters still alive&quot;); omoriChara.add(&quot;Something&quot;); System.out.println(&quot;There are now &quot; + omoriChara.size() + &quot; characters in the game&quot;); } } hack1.main(null); . There are 6 characters still alive There are now 5 characters still alive There are now 6 characters in the game . Hack Number 2 . Removing red terms . import java.util.ArrayList; ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); for(int i = color.size() - 1; i &gt;= 0; i--) { if(color.get(i).contains(&quot;red&quot;)) { color.remove(i);} } System.out.println(color); /*/ using if(color.get(i).contains(&quot;red&quot;)) iterate through the arraylist and remove all elements that contain the word red in them /*/ . [green box, blue water] . Hack Number 3 . Finding the sum . // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int sum = 0; for (int number: num) { sum += number; } System.out.print(sum); . 9 . Quiz . I took it like twice but I forgot to screenshot it so, I really hope you accept my word ;-; .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/12/05/ArrayLists.html",
            "relUrl": "/jupyter/2022/12/05/ArrayLists.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Final Blog",
            "content": "Incorrect Questions... . Question 5 . Question: Consider the following method. Which of the following is printed as a result of executing the following statement? System.out.println(mystery ( 6 ) ) ; | Correct Answer: [4, 7, 12, 19, 28, 39] | Explanation: This is the correct answer becaause the method mystery contains a loop that starts k at 1 and iterates, incrementing k by 1 until k exceeds n, which is 6. In each iteration, the Integer value k * k + 3 is added to the ArrayList seq. In the first iteration, when k is 1, the value 4 is added to the seq, which now contains {4}. In the second iteration, when k is 2, the value 7 is added to seq, which now contains {4, 7}. In the third iteration, when k is 3, the value 12 is added to seq, which now contains {4, 7, 12}. In the fourth iteration, when k is 4, the value 19 is added to seq, which now contains {4, 7, 12, 19}. In the fifth iteration, when k is 5, the value 28 is added to seq, which now contains {4, 7, 12, 19, 28}. In the sixth and final iteration, when k is 6, the value 39 is added to seq, which now contains {4, 7, 12, 19, 28, 39}. | . Question 21 . Question: Consider the following method, which is intended to return the element of a 2-dimensional array that is closest in value to a specified number, val. Which of the following could be used to replace / missing code / so that findClosest will work as intended? | Correct Answer: Math.abs (num - val) &lt; minDiff | Explanation: This is the correct answer because the algorithm uses nested enhanced for loops to iterate across all the elements in mat. The variable num is assigned the value of each element. If the positive difference between num and val is less than minDiff, num is the element of mat that is closest to val so far. | . Question 23 . Question: Consider the following instance variable and method. Assume that animals has been instantiated and initialized with the following contents. What will the contents of animals be as a result of calling manipulate? | Correct Answer: [&quot;bear&quot;, &quot;zebra&quot;, &quot;bass&quot;, &quot;cat&quot;, &quot;koala&quot;, &quot;baboon&quot;] | Explanation: This is the correct answer because list is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. The manipulate method contains a for loop with a loop control variable k that starts at the right most index of animals, decrements by 1 each time, until k is equal to 0. In the first iteration, when k is 5, if the element of animals at 5 (“baboon”) starts with a “b”, which it does, then this value is removed from the list and inserted at index 1. The list would then be {“bear”, “baboon”, “zebra”, “bass”, “cat”, “koala”}. In the second iteration, when k is 4, the element of animals at 4 (“cat”) does not start with a “b” and no changes are made to the list. In the third iteration, when k is 3, the element of animals at 3 (“bass”) starts with a “b”. This value is removed from the list and inserted at index 3. Since it was already at index 3, the list would not change. In the fourth iteration, when k is 2, the element of animals at 2 (“zebra”) does not start with a “b” and no changes are made to the list. In the fifth iteration, when k is 1, the element of animals at 1 (“baboon”) starts with a “b”. It is removed from the list and inserted at index 5. The list would then be {“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”}. Finally, k decrements to 0 which is not greater than 0 so the loop terminates. | . Question 28 . Question: Directions: Select the choice that best fits each statement. The following question(s) refer to the following method. Which of the following is true of method mystery? | Correct Answer: n will always be greater than 2 at // Point B. | Explanation: This is the correct answer because the while loop only iterates while n is greater than 2 and //Point B is in the body of the while loop prior to any change to the value of n. At this point, n will always be greater than 2. | . Question 30 . Question: Consider the following method. What value is returned as a result of the call scramble(&quot;compiler&quot;, 3)? | Correct Answer: &quot;ilercom&quot; | Explanation: This is the correct answer because the two parameter substring method returns the substring beginning at the first parameter and ending at the second parameter – 1. When word is assigned “compiler” and howFar is assigned 3, the value of word.substring(howFar + 1, word.length()) is “iler”. This is the substring of “compiler” beginning at 3 + 1 or 4 and ending at 8 – 1 or 7. The value of word.substring(0, howFar) is “com”. This is the substring of “compiler” beginning at 0 and ending at 2. The method returns “ilercom”. | . Question 33 . Question: Consider the following code segment. What is printed as a result of executing the code segment? | Correct Answer: Nothing is printed due to an infinite loop | Explanation: This is the correct answer since k is never changed in the body of the while loop, it will always be 1 and less than 4. In a boolean expression with or (||) if one of the two expressions is true, the expression is true. This will cause an infinite loop. (Forgot that || is and) | . General Reflections on Test . Need to read questions more thoroughly and review Java syntax a bit more | I got 6 wrong on the Test which would mean I scored 34/40...I can definitely do better especially since I had to search up a lot of the questions to get help on them | I should definitely look over all the units and review them. | . Links to Lessons . Week Unit . 1 | 2: OOP | . 2 | 3: Boolean and IF | . 2 | 4: Iteration | . 2 | 5: Writing Classes | . 3 | 6: Arrays | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/11/07/finalblog.html",
            "relUrl": "/jupyter/2022/11/07/finalblog.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Iteration Lesson Hacks",
            "content": "Code for Random Number Guesser Game . Make a program where computer generates a number and user has to guess the right number. Iterate till correct guess and also give hints. . import java.util.*; import java.lang.Math; public class GuesserGame { private int secret; private boolean game = false; public void guess(){ secret = (int) (Math.random() * 500); int num = 0; int guesscount = 0; while (!game){ System.out.println(&quot;Guess a number 1-500: &quot;); // Scanner for int Scanner sc = new Scanner(System.in); num = sc.nextInt(); System.out.print(&quot;&quot; + num + &quot; - &quot;); // increment guesscount and check if guess is correct guesscount++; if (num == secret) { System.out.println(&quot;Congratulations! You got it right in &quot; + guesscount + &quot; guesses !&quot;); game = true; } else if (num &gt; secret) { System.out.println(&quot;Your guess is too high!&quot;); } else if (num &lt; secret) { System.out.println(&quot;Your guess is too low!&quot;); } } } public void guess(int num){ } } GuesserGame a = new GuesserGame(); a.guess(); . Guess a number 1-500: 4 - Your guess is too low! Guess a number 1-500: 100 - Your guess is too low! Guess a number 1-500: 300 - Your guess is too high! Guess a number 1-500: 200 - Your guess is too low! Guess a number 1-500: 250 - Your guess is too high! Guess a number 1-500: 225 - Your guess is too low! Guess a number 1-500: 240 - Your guess is too high! Guess a number 1-500: 230 - Your guess is too high! Guess a number 1-500: 227 - Congratulations! You got it right in 9 guesses ! .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/10/19/Iteration.html",
            "relUrl": "/jupyter/2022/10/19/Iteration.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Boolean and IF Statements Lesson Hacks",
            "content": "2009 FRQ 3B . public int getChargeStartTime(int chargeTime) { int cheapestStartHour = 0; for(int startHour = 1; startHour &lt; rateTable.length; startHour++) if(getChargingCost(startHour, chargeTime) &lt; getChargingCost(cheapestStartHour, chargeTime)) cheapestStartHour = startHour; return cheapestStartHour; } . 2017 FRQ 1b . import java.util.*; public class Digits { private ArrayList&lt;Integer&gt; digitList; public Digits(int num) { digitList = new ArrayList&lt;Integer&gt;(); if (num==0){ digitList.add(new Integer(0)); } while (num &gt; 0) { digitList.add(0, new Integer(num % 10)); num /= 10; } } public boolean isStrictlyIncreasing() { boolean increase = true; for (int i = 0; i &lt; digitList.size() - 1; i++) { if (digitList.get(i).intValue() &gt;= digitList.get(i + 1).intValue()) { increase = false; return increase; } } return increase; } } System.out.println(new Digits(1356).isStrictlyIncreasing()); System.out.println(new Digits(1536).isStrictlyIncreasing()); . true false . 2019 FRQ 3B . public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int openDels = 0; int closeDels = 0; for (String del : delimiters) { if (del.equals(openDel)) { openDels++; } else { closeDels++; } if (closeDels &gt; openDels) { return false; } } return openDels == closeDels; } .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/10/18/BooleanLesson.html",
            "relUrl": "/jupyter/2022/10/18/BooleanLesson.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "OOP Lesson Hacks",
            "content": "Code for Goblin Game... . Had to add a hit chance feature... . import java.util.*; public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } public class Duel { public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { // goblin1 hit chance tester if (Math.random() &lt; goblin2.getHitChance()) { goblin2.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin2.getName() + &quot; missed!&quot;); } // print hp of goblin1 System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } // if statement for goblin2 hit chance if (Math.random() &lt; goblin1.getHitChance()) { goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin1.getName() + &quot; missed!&quot;); } // print hp of goblin2 System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Naruto&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.5); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Sasuke&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); . Sasuke missed! Naruto HP: 12 Sasuke takes 2 damage Sasuke HP: 2 Naruto takes 1 damage Naruto HP: 12 Naruto missed! Sasuke HP: 1 Naruto takes 1 damage Naruto HP: 12 Naruto missed! Sasuke HP: 0 Sasuke has perished . 2021 FRQ 1 . // #1 public class WordMatch { String secret; public WordMatch(String secret) { this.secret = secret; } public void scoreGuess(String guess) { int counter = 0; // for loop for first substring index for (int i = 0; i &lt; this.secret.length(); i++){ // loop for second substring index for (int j = i + 1; j &lt; this.secret.length() + 1; j++) { // if statement if (guess.equals(this.secret.substring(i,j))) { counter++; } } } // Returning a point value int points = counter * guess.length() * guess.length(); System.out.println(&quot;&quot; + guess + &quot; = &quot; + points); // return points; } } WordMatch game = new WordMatch(&quot;mississippi&quot;); game.scoreGuess(&quot;i&quot;); game.scoreGuess(&quot;iss&quot;); game.scoreGuess(&quot;issipp&quot;); game.scoreGuess(&quot;mississippi&quot;); WordMatch game = new WordMatch(&quot;aaaabb&quot;); game.scoreGuess(&quot;a&quot;); game.scoreGuess(&quot;aa&quot;); game.scoreGuess(&quot;aaa&quot;); game.scoreGuess(&quot;aabb&quot;); game.scoreGuess(&quot;c&quot;); . i = 4 iss = 18 issipp = 36 mississippi = 121 a = 4 aa = 12 aaa = 18 aabb = 16 c = 0 .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/10/13/OOP.html",
            "relUrl": "/jupyter/2022/10/13/OOP.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Writing Classes Lesson Hacks",
            "content": "2021 FRQ 1A . public class WordMatch { String secret; public WordMatch(String secret) { this.secret = secret; } public void scoreGuess(String guess) { int counter = 0; // for loop for first substring index for (int i = 0; i &lt; this.secret.length(); i++){ // loop for second substring index for (int j = i + 1; j &lt; this.secret.length() + 1; j++) { // if statement if (guess.equals(this.secret.substring(i,j))) { counter++; } } } // Returning a point value int points = counter * guess.length() * guess.length(); System.out.println(&quot;&quot; + guess + &quot; = &quot; + points); // return points; } } WordMatch game = new WordMatch(&quot;mississippi&quot;); game.scoreGuess(&quot;i&quot;); game.scoreGuess(&quot;iss&quot;); game.scoreGuess(&quot;issipp&quot;); game.scoreGuess(&quot;mississippi&quot;); WordMatch game = new WordMatch(&quot;aaaabb&quot;); game.scoreGuess(&quot;a&quot;); game.scoreGuess(&quot;aa&quot;); game.scoreGuess(&quot;aaa&quot;); game.scoreGuess(&quot;aabb&quot;); game.scoreGuess(&quot;c&quot;); . i = 4 iss = 18 issipp = 36 mississippi = 121 a = 4 aa = 12 aaa = 18 aabb = 16 c = 0 . 2021 FRQ 3A . public class ClubMembers { private ArrayList&lt;MemberInfo&gt; memberList; public void addMembers(String[] names, int gradYear) { for(name : names) { memberList.add(new MemberInfo(name, gradYear, true)); } } } .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/10/13/Classes.html",
            "relUrl": "/jupyter/2022/10/13/Classes.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Arrays Lesson Hacks",
            "content": "Swap Last and First Elements . import java.util.Arrays; public class ArrayMethods { public static void main(String[] args) { int[] array_nums = {20, 30, 40}; System.out.println(&quot;Original Array: &quot;+Arrays.toString(array_nums)); int x = array_nums[0]; array_nums[0] = array_nums[array_nums.length-1]; array_nums[array_nums.length-1] = x; System.out.println(&quot;New array after swaping the first and last elements: &quot;+Arrays.toString(array_nums)); } } ArrayMethods.main(null); . Original Array: [20, 30, 40] New array after swaping the first and last elements: [40, 30, 20] . Check for Duplicates . import java.util.Arrays; public class Duplicates { public static void main(String[] args) { int[] my_array = {1, 2, 5, 5, 6, 6, 7, 2}; for (int i = 0; i &lt; my_array.length-1; i++) { for (int j = i+1; j &lt; my_array.length; j++) { if ((my_array[i] == my_array[j]) &amp;&amp; (i != j)) { System.out.println(&quot;Duplicate Element : &quot;+my_array[j]); } } } } } Duplicates.main(null); . Duplicate Element : 2 Duplicate Element : 5 Duplicate Element : 6 . Check if Array is Increasing/Decreasing . import java.math.*; class GFG { public static void checkType(int arr[], int n) { if (arr[0] &lt;= arr[1] &amp;&amp; arr[n - 2] &lt;= arr[n - 1]) System.out.println(&quot;Increasing&quot;); else if (arr[0] &gt;= arr[1] &amp;&amp; arr[n - 2] &gt;= arr[n - 1]) System.out.println(&quot;Decreasing&quot;); else if (arr[0] &lt;= arr[1] &amp;&amp; arr[n - 2] &gt;= arr[n - 1]) System.out.println(&quot;Increasing then decreasing&quot;); else System.out.println(&quot;Decreasing then increasing&quot;); } public static void main(String[] args) { int[] arr = new int[]{ 1, 2, 3, 4 }; int n = arr.length; checkType(arr, n); } } GFG.main(null); . Increasing .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/10/13/Arrays.html",
            "relUrl": "/jupyter/2022/10/13/Arrays.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Arrays",
            "content": "import java.util.ArrayList; public class MeditationSuggestions { public static void main(String[] args) { testing(null); } public static void testing(String[] args) { // defining breathing exercises in meditation as an empty arraylist ArrayList&lt;String&gt; meditation = new ArrayList&lt;String&gt;(Arrays.asList(&quot;Box Breathing&quot;, &quot;Belly Breathing&quot;, &quot;4-7-8&quot;)); System.out.println(&quot;Original array:&quot;); System.out.println(&quot;&quot; + meditation); System.out.println(&quot; - &quot; + meditation.size() + &quot; techniques&quot;); System.out.println(&quot; -- &quot;); // Add 3 breathing exercises to meditation meditation.add(&quot;Rainbow Breathing&quot;); meditation.add(&quot;5 Finger Breathing&quot;); meditation.add(&quot;Diaphragm Breathing&quot;); // Printing result System.out.println(&quot;Example with adding to array:&quot;); System.out.println(&quot;&quot; + meditation); System.out.println(&quot; - &quot; + meditation.size() + &quot; techniques&quot;); System.out.println(&quot; -- &quot;); // Remove previously added exercises... meditation.remove(&quot;Rainbow Breathing&quot;); meditation.remove(&quot;5 Finger Breathing&quot;); meditation.remove(&quot;Diaphragm Breathing&quot;); // Printing result System.out.println(&quot;Example with removing from array:&quot;); System.out.println(&quot;&quot; + meditation); System.out.println(&quot; - &quot; + meditation.size() + &quot; techniques&quot;); System.out.println(&quot; -- &quot;); // Clearing all items in list meditation.clear(); // Printing Result System.out.println(&quot;Example with clearing array:&quot;); System.out.println(&quot;&quot; + meditation); System.out.println(&quot; - &quot; + meditation.size() + &quot; techniques&quot;); System.out.println(&quot;Is array empty? True or False: &quot; + meditation.isEmpty()); System.out.println(&quot; -- &quot;); if (meditation.isEmpty() == true) { meditation.add(&quot;Box breathing&quot;); meditation.add(&quot;Belly breathing&quot;); meditation.add(&quot;4-7-8&quot;); } System.out.println(&quot;Example with adding back to the array:&quot;); System.out.println(&quot;&quot; + meditation); System.out.println(&quot; - &quot; + meditation.size() + &quot; techniques&quot;); System.out.println(&quot; -- &quot;); } } MeditationSuggestions.main(null); . Original array: [Box Breathing, Belly Breathing, 4-7-8] - 3 techniques -- Example with adding to array: [Box Breathing, Belly Breathing, 4-7-8, Rainbow Breathing, 5 Finger Breathing, Diaphragm Breathing] - 6 techniques -- Example with removing from array: [Box Breathing, Belly Breathing, 4-7-8] - 3 techniques -- Example with clearing array: [] - 0 techniques Is array empty? True or False: true -- Example with adding back to the array: [Box breathing, Belly breathing, 4-7-8] - 3 techniques -- .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/10/07/arraystuff.html",
            "relUrl": "/jupyter/2022/10/07/arraystuff.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Title",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://mental-health-info-api.p.rapidapi.com/news/thetimes&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;a8ea413753msh15f71679011b0bbp19bf3ejsn899c6392170a&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;mental-health-info-api.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . [{&#34;title&#34;:&#34;UK NEWSFormer soldier’s coastal run raises £400,000 for mental health charityAfter surviving two bomb blasts in Iraq and Afghanistan, Paul Minter could be forgiven for wanting a quiet life. ...Tuesday October 04 2022, 5.00pm, The TimesKieran Gair&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/former-soldiers-coastal-run-raises-400-000-for-mental-health-charity-rx6r5p22r&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;GILLIAN BOWDITCHSuicidal children are being failed. The system is brokenA quarter of children referred for specialist help with mental health problems have either tried or thought about...Sunday September 04 2022, 12.01am, The Sunday TimesGillian Bowditch&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/suicidal-children-failed-broken-system-scotland-comment-xgtdp0h2b&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;HEALTHParents go private to get children mental health helpParents are increasingly turning to private health services for support with their children’s mental health...Monday August 08 2022, 12.01am, The TimesKat Lay, Health Editor&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/parents-go-private-to-get-children-mental-health-help-72fn9w53n&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;HEALTHChild mental health crisis ‘holds nation back’The mental health emergency among children is so profound that it threatens the country’s future prosperity, a...Saturday July 30 2022, 12.01am, The TimesJames Beal, Social Affairs Editor&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/child-mental-health-crisis-is-holding-england-back-5s8qpzclj&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;Children attempt suicide as they wait for NHS helpThousands of children and young adults have attempted suicide as a result of long waits for NHS mental health care...Thursday July 21 2022, 12.01am, The TimesKat Lay, Health Editor&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/children-attempt-suicide-as-they-wait-for-nhs-help-bgnhslbzc&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;Video IconHEALTHCost of living risks ‘pandemic-style mental health crisis’The cost of living crisis poses a pandemic-level threat to the nation’s mental wellbeing, one of Britain’s most...Monday June 20 2022, 2.45pm, The TimesKat Lay, Health Editor&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/cost-of-living-risks-pandemic-style-mental-health-crisis-lwwcxzlvb&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;HEALTHMental illness among young at record highA record number of children and young people are being treated for mental health problems. More than 420,000 were...Monday May 23 2022, 12.01am, The TimesCharlie Moloney&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/mental-illness-in-children-and-young-people-at-record-high-pz7qn3r2b&#34;,&#34;source&#34;:&#34;thetimes&#34;},{&#34;title&#34;:&#34;UK NEWSBecker ‘mentally strong and doing OK’ in jailBoris Becker is doing “OK” in prison and his mental health is good, but life inside Wandsworth jail is “not a...Wednesday May 04 2022, 9.30am, The TimesKieran Gair&#34;,&#34;url&#34;:&#34;https://www.thetimes.co.uk/article/boris-becker-mentally-strong-and-doing-ok-in-jail-says-wife-s68p2l386&#34;,&#34;source&#34;:&#34;thetimes&#34;}] . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://i-m-all-ears.p.rapidapi.com/?id=&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;a8ea413753msh15f71679011b0bbp19bf3ejsn899c6392170a&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;i-m-all-ears.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;count&#34;:16,&#34;next&#34;:&#34;https://fyp-api-ml.herokuapp.com/predict/?id=&amp;page=2&#34;,&#34;previous&#34;:null,&#34;results&#34;:[{&#34;id&#34;:&#34;4ad82ba3-9b39-4da9-ae1c-8393d58632e7&#34;,&#34;text&#34;:&#34;how do you break an anxious attachment style to make sure of a healthy possible relationship, without being avoidant? i noticed i send the first texts a lot and care a little too much about when this guy texts me back and when he doesn’t have the time to , i spiral. i don’t confront him about it because i know he’s got a lot going on at the moment and know that it’s just me overthinking because we still do talk and have a lot in common. we just started talking the beginning of the month and i feel like we’re getting to know eachother and we hung out for the first time a couple days ago and it was great ! i just don’t wanna send too many messages or try to hard because i’m very scared to scare him away. how do i let him prepare and let everything slowly work it’s way up to a relationship without completely just not messaging him or interacting immediately?&#34;,&#34;prediction&#34;:&#34;Type 3&#34;,&#34;score&#34;:&#34;100.00%&#34;,&#34;diagnosis&#34;:&#34;[&#39;Generalized Anxiety Disorder&#39;, &#39;Major Depressive Disorder&#39;, &#39;Hypomania&#39;, &#39;Adjustment Disorder&#39;, &#39;Suicidal Ideation Paranoid&#39;, &#39;Schizophrenia&#39;, &#39;Borderline Personality Disorder&#39;, &#39;Dissociative Disorder&#39;, &#39;Type-A Personality&#39;]&#34;,&#34;stressor&#34;:&#34;[&#39;Work Stress&#39;, &#39;Companionship Issues&#39;, &#39;Public Expectation&#39;, &#39;Underlying Unresolved Health Issues&#39;, &#39;Hereditary Traits&#39;]&#34;,&#34;symptom&#34;:&#34;[&#39;Anxiety&#39;, &#39;Helplessness&#39;, &#39;Emptiness&#39;, &#39;Loss of Motivation&#39;, &#39;Anhedonia (Loss of Passion)&#39;, &#39;Fatigue&#39;, &#39;Isolation&#39;, &#39;Suicidal Thoughts&#39;, &#39;Paranoia&#39;, &#39;Hearing Voices&#39;, &#39;Hallucination&#39;, &#39;Comptetitiveness&#39;]&#34;},{&#34;id&#34;:&#34;76474528-5d72-4e59-96fe-bd0dd9b974bb&#34;,&#34;text&#34;:&#34;I am depressed. Please don&#39;t scroll down. r nI&#39;m 24 years old. I had a pretty normal life. My father passed away when I was in 4th standard. My mom is always there for me. She helped me a lot. Now, I&#39;m way past the time to get a job. My mom is pressuring me. I have failed my college, I couldn&#39;t pass the failed subjects. All my friends are successful and I got left out, which is my fault. I failed because I took the physics to major and I&#39;m not at all good in maths. Everyone says to finish it. I don&#39;t want to because I feel like a loser. Mom is forcing me to get a government job(I&#39;m from India, it&#39;s a big thing here). Im trying to get a job, but nothing is working out. I always feel like I&#39;m going to die. I don&#39;t think my mom will support me in getting therapy. I&#39;m living with her. She says a job is necessary to get married. I&#39;m horny and hungry when I am at home. Sometimes I get so sad, I feel like I don&#39;t exist at all. This is not a rant. Still living with mom and trying to pass an exam for government jobs.&#34;,&#34;prediction&#34;:&#34;Type 2&#34;,&#34;score&#34;:&#34;93.70%&#34;,&#34;diagnosis&#34;:&#34;[&#39;Generalized Anxiety Disorder&#39;, &#39;Major Depressive Disorder&#39;, &#39;Hypomania&#39;, &#39;Adjustment Disorder&#39;, &#39;Bipolar Disorder&#39;]&#34;,&#34;stressor&#34;:&#34;[&#39;Work Stress&#39;, &#39;Companionship Issues&#39;]&#34;,&#34;symptom&#34;:&#34;[&#39;Anxiety&#39;, &#39;Helplessness&#39;, &#39;Emptiness&#39;, &#39;Loss of Motivation&#39;, &#39;Anhedonia (Loss of Passion)&#39;, &#39;Fatigue&#39;, &#39;Isolation&#39;, &#39;Attachment Issues&#39;]&#34;},{&#34;id&#34;:&#34;f047eb4a-7a85-42de-8a32-737df409de7a&#34;,&#34;text&#34;:&#34;How I Tricked Myself Into Taking Care of Myself r nBasically, I tricked myself into taking care of myself by taking care of other things. In undergrad I had a betta fish, and now in my apartment I have houseplants. And I mean I have over 40 of them. When I get super depressed, the first things to go are personal hygiene and eating, and it takes me about an hour to decide if I want to get out of bed or not, and if I even can. But! Can&#39;t stay in bed because I don&#39;t want my plants to die! Couldn&#39;t stay in bed because I had to get up and clean my fish tank and feed her! And once I&#39;m out of bed, I guess I can make myself brush my teeth and try to eat something small. Maybe I can make a coffee and I can go out and sit on my balcony for a while. Maybe I can even shower and clean a little. r n r nI&#39;m not saying this will work for everyone, but it&#39;s been a pretty decent help for me :)&#34;,&#34;prediction&#34;:&#34;Type 2&#34;,&#34;score&#34;:&#34;99.79%&#34;,&#34;diagnosis&#34;:&#34;[&#39;Generalized Anxiety Disorder&#39;, &#39;Major Depressive Disorder&#39;, &#39;Hypomania&#39;, &#39;Adjustment Disorder&#39;, &#39;Bipolar Disorder&#39;]&#34;,&#34;stressor&#34;:&#34;[&#39;Work Stress&#39;, &#39;Companionship Issues&#39;]&#34;,&#34;symptom&#34;:&#34;[&#39;Anxiety&#39;, &#39;Helplessness&#39;, &#39;Emptiness&#39;, &#39;Loss of Motivation&#39;, &#39;Anhedonia (Loss of Passion)&#39;, &#39;Fatigue&#39;, &#39;Isolation&#39;, &#39;Attachment Issues&#39;]&#34;}]} .",
            "url": "https://prishab.github.io/my-blog/2022/10/05/api.html",
            "relUrl": "/2022/10/05/api.html",
            "date": " • Oct 5, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Title",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . javax.imageio.IIOException: Can&#39;t read input file! at java.desktop/javax.imageio.ImageIO.read(ImageIO.java:1308) at REPL.$JShell$16C$ImageIOTest.main($JShell$16C.java:49) at REPL.$JShell$42.do_it$($JShell$42.java:36) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at io.github.spencerpark.ijava.execution.IJavaExecutionControl.lambda$execute$1(IJavaExecutionControl.java:95) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:829) . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 220) { str = &quot;.&quot;; } else if (g &gt;= 220) { str = &quot;-&quot;; } else if (g &gt;= 210) { str = &quot;~&quot;; } else if (g &gt;= 200) { str = &quot;;&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 180) { str = &quot;|&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 160) { str = &quot;[&quot;; } else if (g &gt;= 150) { str = &quot;1&quot;; } else if (g &gt;= 140) { str = &quot;3&quot;; } else if (g &gt;= 130) { str = &quot;$&quot;; } else if (g &gt;= 120) { str = &quot;R&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 0 0x0 images/MonaLisa.png Scaled: 0 0x0 images/MonaLisa.png . java.lang.NullPointerException: null at Pics.convertToAscii(#34:1) at Pics.main(#34:1) at .(#45:1) .",
            "url": "https://prishab.github.io/my-blog/2022/10/03/asciithing.html",
            "relUrl": "/2022/10/03/asciithing.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Week of 9/20",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibo in a For Loop Format . We used a for loop to loop through and create a fibonacci sequence. A for loop will loop through a program for as many times listed in the initial condition. . //Using For Loop public class FibonacciFor extends Fibo { public static void main(String[] args) { // Set it to the number of elements you want in the Fibonacci Series int maxNumber = 10; int previousNumber = 0; int nextNumber = 1; System.out.print(&quot;Fibonacci Series of &quot;+maxNumber+&quot; numbers:&quot;); for (int i = 1; i &lt;= maxNumber; ++i) { System.out.print(previousNumber+&quot; &quot;); /* On each iteration, we are assigning second number * to the first number and assigning the sum of last two * numbers to the second number */ int sum = previousNumber + nextNumber; previousNumber = nextNumber; nextNumber = sum; } Fibo fib = new Fibo(); fib.print(); } } FibonacciFor.main(null); . Fibonacci Series of 10 numbers:0 1 1 2 3 5 8 13 21 34 Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibonacci in a While Loop Format . We extended Fibo to create a while loop to loop through and create a fibonacci sequence. The while loop will keep looping as long as a certain boolean value is met. . //Using While Loop public class FibonacciWhile extends Fibo { public static void main(String[] args) { int maxNumber = 10, previousNumber = 0, nextNumber = 1; System.out.print(&quot;Fibonacci Series of &quot;+maxNumber+&quot; numbers:&quot;); int i=1; while(i &lt;= maxNumber) { System.out.print(previousNumber+&quot; &quot;); int sum = previousNumber + nextNumber; previousNumber = nextNumber; nextNumber = sum; i++; } Fibo fib = new Fibo(); fib.print(); } } FibonacciWhile.main(null); . Fibonacci Series of 10 numbers:0 1 1 2 3 5 8 13 21 34 Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibonacci Series using Recursion . After extending Fibo, we used recursion to loop through and create a fibonacci sequence. A recursion loop divides an overarching program into mini-programs that can be used to create some kind of output. . //Using Recursion public class FibonacciRecursion extends Fibo { public static int fibonacciRecursion(int n){ if(n == 0){ return 0; } if(n == 1 || n == 2){ return 1; } return fibonacciRecursion(n-2) + fibonacciRecursion(n-1); } public static void main(String args[]) { int maxNumber = 10; System.out.print(&quot;Fibonacci Series of &quot;+maxNumber+&quot; numbers: &quot;); for(int i = 0; i &lt; maxNumber; i++){ System.out.print(fibonacciRecursion(i) +&quot; &quot;); } Fibo fib = new Fibo(); fib.print(); } } FibonacciRecursion.main(null); . Fibonacci Series of 10 numbers: 0 1 1 2 3 5 8 13 21 34 Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/09/24/fibo.html",
            "relUrl": "/jupyter/2022/09/24/fibo.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Week of 9/20",
            "content": "Project Idea . Site dedicated to helping Del Norte students manage their mental health better. . // Java program to print greeting class greet { public static void main(String[] args) { System.out.println(&quot;Welcome to Health.ly!&quot;); // line that we are printing } } greet.main(null); // calling the class to use . Welcome to Health.ly! . Meet our team! . Using an array to print members of the team and their jobs on the team. . // Array with list of members and positions String[][] positions = {{&quot;Saumya&quot;, &quot;Scrum Leader&quot;},{&quot;Serafina&quot;, &quot;Deployment&quot;}, {&quot;Armaan&quot;, &quot;Frontend&quot;}, {&quot;Prisha&quot;, &quot;Backend&quot;}}; // Printing out the array values side by side System.out.println(Arrays.deepToString(positions)); . [[Saumya, Scrum Leader], [Serafina, Deployment], [Armaan, Frontend], [Prisha, Backend]] .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/09/24/JavaStuff.html",
            "relUrl": "/jupyter/2022/09/24/JavaStuff.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Title",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 1 { &quot; Monkey 1&quot;, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 2 { &quot; Monkey 2&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 3 { &quot; Monkey 3&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 4 { &quot; Monkey 4&quot;, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 5 { &quot; Monkey 5&quot;, &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; int rowCount = 0; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); for (int col = 0; col &lt; monkeys[rowCount].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } rowCount += 1; //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... Monkey 1 Monkey 2 Monkey 3 Monkey 4 Monkey 5 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... Monkey 1 Monkey 2 Monkey 3 Monkey 4 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... Monkey 1 Monkey 2 Monkey 3 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... Monkey 1 Monkey 2 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... Monkey 1 ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . import java.util.Scanner; public class MultiplicationTable2 { private static Scanner sc; public static void main(String[] args) { int number; sc = new Scanner(System.in); System.out.print(&quot; Please Enter any Number: &quot;); number = sc.nextInt(); MultiTable(number); } public static void MultiTable(int num) { int i, j; for(i = num; i &lt; 10; i++) { for(j = 1; j &lt;= 10; j++) { System.out.println(i +&quot; * &quot; + j + &quot; = &quot; + i * j); } System.out.println(&quot;=================&quot;); } } } MultiplicationTable2.main(null); . Please Enter any Number: 7 * 1 = 7 7 * 2 = 14 7 * 3 = 21 7 * 4 = 28 7 * 5 = 35 7 * 6 = 42 7 * 7 = 49 7 * 8 = 56 7 * 9 = 63 7 * 10 = 70 ================= 8 * 1 = 8 8 * 2 = 16 8 * 3 = 24 8 * 4 = 32 8 * 5 = 40 8 * 6 = 48 8 * 7 = 56 8 * 8 = 64 8 * 9 = 72 8 * 10 = 80 ================= 9 * 1 = 9 9 * 2 = 18 9 * 3 = 27 9 * 4 = 36 9 * 5 = 45 9 * 6 = 54 9 * 7 = 63 9 * 8 = 72 9 * 9 = 81 9 * 10 = 90 ================= .",
            "url": "https://prishab.github.io/my-blog/2022/09/20/asciistuff.html",
            "relUrl": "/2022/09/20/asciistuff.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Focus and Skills",
            "content": "Takeaways from vid . Important to prioritize mental, physical, and emotional health | Surprised me even college students feel the same way...usually expected to be better at balance by adulthood | Take time to do things you love in life, not just academic stuff | Take the time to be with others because humans are social beings anywho | . Things I&#39;m grateful for . My life in general, it&#39;s very privileged tbh | My family | My friends | My body | The place I live in | . Goals . Prepare for my classes in advance so I&#39;m not stressed and overwhelmed in the last minute | Spend more time with friends and family (in person not online) | Try to sleep more regularly...rn I sleep at the most random times | Spend more time offline | . Thank you Note . Grateful to my parents for constantly checking in on my mental health and making sure I&#39;m not too overwhelmed with work. They are always there to help keep me on track and even though I may think it&#39;s nagging I know they are just doing it for my sake anyway. .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/09/12/videonotes.html",
            "relUrl": "/jupyter/2022/09/12/videonotes.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Boolean Expressions and If-Else Statements",
            "content": "Booleans . Logical data types that only have true or false values. In java it is usually used to determine which sections of code to execute. . If Statements and other Conditionals . Will check boolean value and execute based on whether the conditions is met or not. The If statement is used to check the first condition and if that requirement is met, then it will execute the command. The else statement follows after and executes another command in case the original requirement for the if statement was not met. The else if comes in between and shows another condition to meet and will run if it is met. . if (score &gt;= 90) { grade = &#39;A&#39;; } else if (score &gt;= 80) { grade = &#39;B&#39;; } else if (score &gt;= 70) { grade = &#39;C&#39;; } else if (score &gt;= 60) { grade = &#39;D&#39;; } else { grade = &#39;F&#39; } . De Morgan&#39;s Law . Kind of like probability in stats, it is used to help you add multiple conditions to your boolean value. You can use || to represent &quot;or&quot; and &amp;&amp; to represent &quot;and&quot;. . boolean cat = true; boolean spotted = false; if (!(cat &amp;&amp; spotted)){ System.out.println(&quot;You have a spotted cat&quot;); } else{ System.out.println(&quot;Your cat is not spotted&quot;); } . You have a spotted cat .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/09/12/conditionals.html",
            "relUrl": "/jupyter/2022/09/12/conditionals.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Documentation/Analysis",
            "content": "Class . basic building block | must be given keyword &quot;class&quot; in java (at the top) followed by class name | followed by methods and variables | . | class declaration includes: Modifiers: A class can be public or has default access. | class keyword: The class keyword is used to create a class. | Class name: The name must begin with an initial letter (capitalized by convention). | Superclass (if any): The name of the class&#39;s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent. | Interfaces (if any): A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface. | Body: The class body surrounded by braces, { }. | . | . //to create a class public class Main { int x = 5; } . //multiple classes class Second { public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } . Instance of a Object . non-static variables defined outside any method, constructor, block, etc. | has a separate copy or instance | belongs to a class | instance variables are in the class but outside methods | have different defaults that are later specified | can only be used when an object is made | is destroyed with the object it&#39;s assoc. with | not necessary to be initialized | accessible in the same class that declares them | cannot be declared static, abstract, etc. only final and transient | can be any fof the four java modifiers: private, public, protected, and default | . | include: boolean, byte, short, int, double, float, long, Object, char | . //to create an object public class Main { int x = 5; public static void main(String[] args) { Main myObj = new Main(); System.out.println(myObj.x); } } . //multiple objects public class Main { int x = 5; public static void main(String[] args) { Main myObj1 = new Main(); // Object 1 Main myObj2 = new Main(); // Object 2 System.out.println(myObj1.x); System.out.println(myObj2.x); } } . Methods . a block of code only running when called | used to pass data, (parameters) | perform actions, known also as functions | reuse code and define the code once to use repetitively | in the example below: myMethod() = name of method | static --&gt; means that the method belongs to the Main class and not an object of the Main class. | void --&gt; this method doesn&#39;t return a value | . | to call a method, write the method&#39;s name w/ 2 parentheses and a semicolon | . //basic method syntax public class Main { static void myMethod() { // code to be executed } } . //calling a method public class Main { static void myMethod() { System.out.println(&quot;I just got hired!&quot;); } public static void main(String[] args) { myMethod(); } } // Outputs &quot;I just got hired!&quot; . Object Mutation . faults inserted into a program that distinguish the mutant from the original program | certain objects are mutable vs. immutable | strings are immutable; will always rep. the same string but StringBuilder is mutable; it has methods to delete, insert, or replace characters | . | mutable types seem more powerful than immutable ones mutable is safer from bugs than immutable | easier to understand than immutable | . | . Console vs. GUI vs. Code.org . console: console class in java provides methods to access character-based console device | GUI = graphical user interface; graphical representation where users interact w/ software/devices through clickable icons | CLI: console/text/character based representation where user types commands into a terminal to operate or navigate the software/devices | Code.org: thus is CLI; typing of commands, character-based | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2022/09/05/documentanalysis.html",
            "relUrl": "/jupyter/2022/09/05/documentanalysis.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Title",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); // map.put(&quot;What year was the DOI signed?&quot;, &quot;1776&quot;); // map.put(&quot;What saved the capitol during the War of 1812?&quot;, &quot;Thunderstorm&quot;); // map.put(&quot;Who was the 2nd President of the US?&quot;, &quot;John Adams&quot;); public final String[][] QUESTIONS = { // 2D Array of ANSI Terminal Colors {&quot;What year was the DOI signed?&quot;, &quot;1776&quot;}, {&quot;What saved the capitol during the War of 1812?&quot;, &quot;Thunderstorm&quot;}, {&quot;Who was the 2nd President of the US?&quot;, &quot;John Adams&quot;}, {&quot;Who was mainly involved in the corrupt bargain?&quot;, &quot;John Qunicy Adams&quot;}, }; // 2D column location for data public final int TITLE = 0; public final int VALUE = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - History Flashcards (Prisha Boreddy)&quot;); System.out.println(&quot;5 - GPA Calculator (Prisha Boreddy)&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private void calculator() { Scanner input = new Scanner(System.in); String letterGrades = &quot;&quot;; double weight; double sum = 0.00; int num = 1; double classes = 0; System.out.print(&quot;This is a simple GPA calculator. After being asked to put in the number of classes you are taking, please respond to the following prompts with a capital letter.&quot;); System.out.print(&quot;Number of classes you are taking this trimester: n&quot;); classes = input.nextInt(); for (int i = 0; i &lt; classes; i++) { Scanner input2 = new Scanner(System.in); System.out.print(&quot;What is your Grade in Period &quot; + num + &quot;? &gt; &quot;); letterGrades = input2.nextLine(); System.out.print(letterGrades + &quot; n&quot;); if (letterGrades.equals(&quot;A&quot;)){ weight = 4.00; sum += weight; } else if (letterGrades.equals(&quot;B&quot;)){ weight = 3.00; sum += weight; } else if (letterGrades.equals(&quot;C&quot;)){ weight = 2.00; sum += weight; } else if (letterGrades.equals(&quot;D&quot;)){ weight = 1.00; sum += weight; } else if (letterGrades.equals(&quot;F&quot;)){ weight = 0.00; sum += weight; } else { System.out.println(&quot;Improper syntax&quot;); break; } num = num + 1; } double GPA = sum / classes; System.out.println(&quot;Your Un-weighted GPA is:&quot; + GPA); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: for(int i = 0; i &lt; QUESTIONS.length; i++) // loop through COLORS array System.out.print(QUESTIONS[i][TITLE]); for(int i = 0; i &lt; QUESTIONS.length; i++) // loop through COLORS array System.out.print(QUESTIONS[i][VALUE]); // for(Entry&lt;Integer, String&gt; entry : map.entrySet()) // { //print keys and values // System.out.println(entry.getKey() + &quot; : &quot; +entry.getValue()); // } break; case 5: calculator(); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - History Flashcards (Prisha Boreddy) 5 - GPA Calculator (Prisha Boreddy) 0 - Quit - 4: What year was the DOI signed?What saved the capitol during the War of 1812?Who was the 2nd President of the US?Who was mainly involved in the corrupt bargain?1776ThunderstormJohn AdamsJohn Qunicy Adams 5: This is a simple GPA calculator. After being asked to put in the number of classes you are taking, please respond to the following prompts with a capital letter.Number of classes you are taking this trimester: What is your Grade in Period 1? &gt; A What is your Grade in Period 2? &gt; A What is your Grade in Period 3? &gt; A What is your Grade in Period 4? &gt; A Your Un-weighted GPA is:4.0 0: Goodbye, World! .",
            "url": "https://prishab.github.io/my-blog/2022/09/04/study.html",
            "relUrl": "/2022/09/04/study.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Title",
            "content": "",
            "url": "https://prishab.github.io/my-blog/2022/08/30/aboutme.html",
            "relUrl": "/2022/08/30/aboutme.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Hacks Attempts",
            "content": "public class GradeCalculator { // Created a double wrapper class (object) ArrayList&lt;Double&gt; grades; // Create a constructor that initializes ArrayList and called enterGrades method public GradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } // double requires test for zero versus threshold, DO NOT compare to Zero private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } // enterGrades input method using scanner private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; // exit loop on isZero else this.grades.add(sampleInputDouble); // adding to object, ArrayList grades } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } // average calculation public double average() { double total = 0; // running total for (double num : this.grades) { // enhanced for loop total += num; // shortcut add and assign operator } return (total / this.grades.size()); // double math, ArrayList grades object maintains its size } // static main method, used as driver and tester public static void main(String[] args) { GradeCalculator grades = new GradeCalculator(); // calls constructor, creates object, which calls enterGrades System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); // format used to standardize to two decimal points } } // IJava activation GradeCalculator.main(null); . Enter a double, 0 to exit: 5.0 Enter a double, 0 to exit: 5.0 Enter a double, 0 to exit: 5.0 Enter a double, 0 to exit: 5.0 Enter a double, 0 to exit: 5.0 Enter a double, 0 to exit: 5.0 Enter a double, 0 to exit: 5.0 Enter a double, 0 to exit: 5.0 Enter a double, 0 to exit: 6.0 Enter a double, 0 to exit: 25.0 Enter a double, 0 to exit: .",
            "url": "https://prishab.github.io/my-blog/jupyter/2020/08/28/practice.html",
            "relUrl": "/jupyter/2020/08/28/practice.html",
            "date": " • Aug 28, 2020"
        }
        
    
  
    
        ,"post34": {
            "title": "Blog Notes",
            "content": "Issue with updating notebook - 08/28 Resolved by allowing some time before hitting save | . | .",
            "url": "https://prishab.github.io/my-blog/jupyter/2020/08/28/blog-notes.html",
            "relUrl": "/jupyter/2020/08/28/blog-notes.html",
            "date": " • Aug 28, 2020"
        }
        
    
  
    
        ,"post35": {
            "title": "Primitives Notebook 01",
            "content": "Fastpages Primitives Notes/Learning Captured . set of data types | in CSA exam; consist of int, boolean, double int; integer | boolean; true/false | double; stores floating pt numbers | . | includes variables | . public class DefinePrimitives { public static void main(String[] args) { int anInt = 100; double aDouble = 89.9; boolean aBoolean = true; // not primitives but essential String aString = &quot;Hello, World!&quot;; // wrapper class shortcut assignment String aStringFormal = new String(&quot;Greetings, World!&quot;); System.out.println(&quot;anInt: &quot; + anInt); System.out.println(&quot;aDouble: &quot; + aDouble); System.out.println(&quot;aBoolean: &quot; + aBoolean); System.out.println(&quot;aString: &quot; + aString); System.out.println(&quot;aStringFormal: &quot; + aStringFormal); } } DefinePrimitives.main(null) . anInt: 100 aDouble: 89.9 aBoolean: true aString: Hello, World! aStringFormal: Greetings, World! .",
            "url": "https://prishab.github.io/my-blog/jupyter/2020/08/28/First-Primitive.html",
            "relUrl": "/jupyter/2020/08/28/First-Primitive.html",
            "date": " • Aug 28, 2020"
        }
        
    
  
    
        ,"post36": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://prishab.github.io/my-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post37": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://prishab.github.io/my-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Hello and welcome to my fastpages :D .",
          "url": "https://prishab.github.io/my-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://prishab.github.io/my-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}